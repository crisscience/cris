package edu.purdue.cybercenter.dm.web;

import edu.purdue.cybercenter.dm.domain.Configuration;
import edu.purdue.cybercenter.dm.domain.Experiment;
import edu.purdue.cybercenter.dm.domain.Group;
import edu.purdue.cybercenter.dm.domain.Job;
import edu.purdue.cybercenter.dm.domain.MetaField;
import edu.purdue.cybercenter.dm.domain.Project;
import edu.purdue.cybercenter.dm.domain.User;
import edu.purdue.cybercenter.dm.domain.Workflow;
import edu.purdue.cybercenter.dm.service.CqlService;
import edu.purdue.cybercenter.dm.service.DatasetService;
import edu.purdue.cybercenter.dm.service.DomainObjectService;
import edu.purdue.cybercenter.dm.service.TermService;
import edu.purdue.cybercenter.dm.util.AppConfigConst;
import edu.purdue.cybercenter.dm.util.ConstDatasetState;
import edu.purdue.cybercenter.dm.util.DomainObjectHelper;
import edu.purdue.cybercenter.dm.util.EnumDatasetState;
import edu.purdue.cybercenter.dm.util.EnumJobStatus;
import edu.purdue.cybercenter.dm.util.Helper;
import edu.purdue.cybercenter.dm.util.JsonTransformer;
import edu.purdue.cybercenter.dm.util.TermName;
import edu.purdue.cybercenter.dm.service.WorkflowService;
import edu.purdue.cybercenter.dm.web.util.WebHelper;
import edu.purdue.cybercenter.dm.web.util.WebJsonHelper;
import edu.purdue.cybercenter.dm.xml.vocabulary.Term;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import org.activiti.engine.FormService;
import org.activiti.engine.HistoryService;
import org.activiti.engine.IdentityService;
import org.activiti.engine.ManagementService;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.form.FormData;
import org.activiti.engine.form.FormProperty;
import org.activiti.engine.history.HistoricActivityInstance;
import org.activiti.engine.history.HistoricProcessInstance;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.Execution;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.IdentityLink;
import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskQuery;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

@RequestMapping("/jobs")
@Controller
public class JobController {

    private final static Boolean AutoStart = true;
    private final static String TheEndHtmlName = "the_end.html";
    private final static String HtmlTemplate = "<cris-dataset term=\"term\" dataset=\"data\" message=\"message\" read-only=\"false\" context=\"context\"><!--  --></cris-dataset><input id=\"idAutoGenerated\" type=\"hidden\" name=\"autoGenerated\" value=\"true\"/>";

    @Autowired
    private RuntimeService runtimeService;
    @Autowired
    private TaskService taskService;
    @Autowired
    private RepositoryService repositoryService;
    @Autowired
    private ManagementService managementService;
    @Autowired
    private IdentityService identityService;
    @Autowired
    private HistoryService historyService;
    @Autowired
    private FormService formService;

    @Autowired
    private DatasetService datasetService;
    @Autowired
    private DomainObjectService domainObjectService;
    @Autowired
    private TermService termService;
    @Autowired
    private CqlService cqlService;
    @Autowired
    private WorkflowService workflowService;
    @Autowired
    private WebJsonHelper WebJsonHelper;

    @RequestMapping(value = "/index", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String index() {
        return "jobs/index";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String show(@PathVariable("id") Integer id, Model model) {
        model.addAttribute("job", domainObjectService.findById(id, Job.class));
        return "jobs/show";
    }

    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String createForm(Model model, HttpServletRequest request) {
        model.addAttribute("name", request.getParameter("name"));
        model.addAttribute("description", request.getParameter("description"));
        //model.addAttribute("projects", domainObjectService.findAll(Project.class));
        return "jobs/create";
    }

    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String create(@Valid Job job, BindingResult result, Model model, HttpServletRequest request) {
        String projectId = request.getParameter("projectId");
        String experimentId = request.getParameter("experimentId");
        String workflowId = request.getParameter("workflowId");
        String name = request.getParameter("name");
        String description = request.getParameter("description");
        String initParams = request.getParameter("initParams");

        String sEnforceUniqueJobName = Configuration.findProperty("wsEnforceUniqueJobName");
        boolean enforceUniqueJobName;
        if (sEnforceUniqueJobName != null && !sEnforceUniqueJobName.isEmpty() && sEnforceUniqueJobName.equalsIgnoreCase("true")) {
            enforceUniqueJobName = true;
        } else {
            enforceUniqueJobName = false;
        }
        if (enforceUniqueJobName) {
            long count = Job.countByName(name);
            if (count != 0) {
                result.rejectValue("name", null, String.format("job name: \"%s\" has already been used", name));
            }
        }

        if (result.hasErrors()) {
            model.addAttribute("projectId", projectId);
            model.addAttribute("experimentId", experimentId);
            model.addAttribute("workflowId", workflowId);
            model.addAttribute("name", name);
            model.addAttribute("description", description);
            model.addAttribute("projects", domainObjectService.findAll(Project.class));
            model.addAttribute("errorMessage", result);
            return "jobs/create";
        }

        try {
            User user = (User) request.getAttribute("user");
            job = createJob(initParams, WebHelper.convertMultiValueMapToMap(request.getParameterMap()), job, user);
        } catch (NumberFormatException | InvocationTargetException ex) {
            model.addAttribute("projectId", projectId);
            model.addAttribute("experimentId", experimentId);
            model.addAttribute("workflowId", workflowId);
            model.addAttribute("name", name);
            model.addAttribute("description", description);
            model.addAttribute("projects", domainObjectService.findAll(Project.class));
            model.addAttribute("errorMessage", ex.getMessage());
            return "jobs/create";
        }

        if (AutoStart) {
            return "forward:/jobs/start/" + job.getId().toString();
        } else {
            return "redirect:/jobs/" + job.getId().toString();
        }
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String delete(@PathVariable("id") Integer id, Model model) {
        Job job = domainObjectService.findById(id, Job.class);
        if (!job.getStatusId().equals(EnumJobStatus.CREATED.getIndex())) {
            return "redirect:/jobs/" + job.getId().toString();
        }

        return "redirect:/jobs/index";
    }

    @RequestMapping(value = "/run", produces = MediaType.TEXT_HTML_VALUE)
    public String run(Model model, @RequestBody(required = false) String jsonIn, HttpServletRequest request) throws NumberFormatException, InvocationTargetException {
        String projectId = request.getParameter("projectId");
        String experimentId = request.getParameter("experimentId");
        String workflowId = request.getParameter("workflowId");

        // if any of the projectId, experimentId and workflowId is missing, go to createForm page
        if (projectId == null || projectId.isEmpty() || experimentId == null || experimentId.isEmpty() || workflowId == null || workflowId.isEmpty()) {
            model.addAttribute("projects", domainObjectService.findAll(Project.class));
            model.addAttribute("projectId", projectId);
            model.addAttribute("experimentId", projectId);
            model.addAttribute("workflowId", workflowId);
            model.addAttribute("name", request.getParameter("name"));
            model.addAttribute("description", request.getParameter("description"));
            return "jobs/create";
        }

        User user = (User) request.getAttribute("user");
        Job job = createJob(JsonTransformer.transformJson(jsonIn), WebHelper.convertMultiValueMapToMap(request.getParameterMap()), null, user);

        if (job != null) {
            //return "forward:/jobs/start/" + job.getId().toString();
            return start(job.getId(), null, request);
        } else {
            return "jobs/param_info";
        }
    }

    @Transactional
    @RequestMapping(value = "/start/{id}", method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String start(@PathVariable("id") Integer jobId, Model model, HttpServletRequest request) {
        User user = (User) request.getAttribute("user");

        Job job = domainObjectService.findById(jobId, Job.class);
        if (!job.getStatusId().equals(EnumJobStatus.CREATED.getIndex())) {
            return "redirect:/jobs/" + job.getId().toString();
        }

        Map<String, Object> context = new HashMap<>();
        context.put(MetaField.User, user);
        context.put(MetaField.Project, job.getProjectId());
        context.put(MetaField.Experiment, job.getExperimentId());
        context.put(MetaField.Job, job);
        context.put(MetaField.ProjectId, job.getProjectId().getId());
        context.put(MetaField.ExperimentId, job.getExperimentId().getId());
        context.put(MetaField.JobId, job.getId());
        context.put(MetaField.UserId, user.getId());

        // prepare initial local variables
        String parameters = job.getParameters();
        String evalledParameters = cqlService.eval(parameters, context);
        Map<String, Object> initParams;
        if (evalledParameters != null && !evalledParameters.isEmpty()) {
            initParams = Helper.deserialize(evalledParameters, Map.class);
        } else {
            initParams = null;
        }

        // add all system variables to local variables so that activiti can access them.
        Map<String, Object> localVariables = new HashMap<>();
        localVariables.put(MetaField.Current + MetaField.User, user);
        localVariables.put(MetaField.Current + MetaField.Project, job.getProjectId());
        localVariables.put(MetaField.Current + MetaField.Experiment, job.getExperimentId());
        localVariables.put(MetaField.Current + MetaField.Job, job);
        localVariables.put(MetaField.Current + MetaField.ProjectId, job.getProjectId().getId());
        localVariables.put(MetaField.Current + MetaField.ExperimentId, job.getExperimentId().getId());
        localVariables.put(MetaField.Current + MetaField.JobId, job.getId());
        localVariables.put(MetaField.Current + MetaField.UserId, user.getId());
        localVariables.put("initParams", initParams);

        /*
         * Start a process
         */
        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(job.getWorkflowId().getKey(), job.getId().toString(), localVariables);

        // for workflow as session, put job id into session
        List<Integer> jobIds = (List<Integer>) request.getSession().getAttribute("jobIds");
        if (jobIds == null) {
            jobIds = new ArrayList<>();
            request.getSession().setAttribute("jobIds", jobIds);
        }
        jobIds.add(jobId);

        // Check if there's any UI action
        Task task = getNextTask(processInstance, user);
        if (task != null) {
            // return a form view
            return "redirect:/jobs/task/" + job.getId().toString();
        }

        return "redirect:/jobs/" + jobId;
    }

    @RequestMapping(value = "/cancel/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResponseBody
    public ResponseEntity<String> cancel(@PathVariable("id") Integer jobId, Model model, HttpServletRequest request) {
        String message = null;
        Job job = domainObjectService.findById(jobId, Job.class);
        if (job == null) {
            message = "Job \"" + jobId + "\" does not exist";
        } else {
            Set<String> templateUuids;
            ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(jobId.toString()).singleResult();
            if (processInstance != null) {
                // the job is still running

                /*
                 * delete the process instance
                 */
                runtimeService.deleteProcessInstance(processInstance.getId(), null);
            } else {
                // the job is already finished
                templateUuids = job.getTemplateUuids();
                job.setStatusId(EnumJobStatus.CANCELED.getIndex());
                job.merge();

                /*
                 * set all datasets to deprecated state
                 */
                Integer deprecatedState = EnumDatasetState.Deprecated.getIndex();

                Map<String, Object> queryAllJobData = new HashMap<>();
                queryAllJobData.put(MetaField.JobId, jobId);
                datasetService.updateStateUnsecured(deprecatedState, queryAllJobData, templateUuids);
            }

        }

        ResponseEntity<String> responseEntity = new ResponseEntity(message, HttpStatus.OK);

        return responseEntity;
    }

    @RequestMapping(value = "/close/{id}", method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String close(@PathVariable("id") Integer jobId, @RequestParam(value = "status", required = false) String status) {
        Job job = domainObjectService.findById(jobId, Job.class);
        if (job == null) {
            //result.addError(new ObjectError("aaa", "connot find the job"));
            return "redirect:jobs/list";
        }

        job.setStatusId(EnumJobStatus.CLOSED.getIndex());
        job.merge();

        return "redirect:/jobs/" + job.getId().toString();
    }

    @RequestMapping(value = "/task/{id}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String taskForm(@PathVariable("id") Integer jobId, Model model, HttpServletRequest request) {
        Job job = domainObjectService.findById(jobId, Job.class);
        if (job == null) {
            throw new RuntimeException(String.format("No job exists with Job ID: %d", jobId));
        }

        String endUri = request.getParameter("endUri");
        if (endUri != null && !endUri.isEmpty()) {
            job.setEndUri(endUri);
        }

        // debug: list file directory of the job  <-- begin
        String fullPath = AppConfigConst.getJobTmpPath() + AppConfigConst.FILE_SEPARATOR + jobId;
        File root = new File(fullPath);
        List<String> jobFiles = new ArrayList<>();
        File[] files = root.listFiles();
        if (files != null) {
            for (File file : files) {
                jobFiles.add(file.getName());
            }
        }
        model.addAttribute("jobFiles", jobFiles);
        // debug: list file directory of the job <-- end

        User user = (User) request.getAttribute("user");

        String processDefinitionId;
        String formName = null;
        String jsonIn = null;
        Map<String, Object> context = new HashMap<>();

        // check if there's any user tasks left
        ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(job.getId().toString()).singleResult();
        if (processInstance != null) {
            Task task = getNextTask(processInstance, user);

            if (task != null) {
                List<HistoricActivityInstance> activities = historyService.createHistoricActivityInstanceQuery().executionId(task.getExecutionId()).activityId(task.getTaskDefinitionKey()).orderByActivityId().desc().list();
                String activityId = null;
                if (activities.size() > 0) {
                    activityId = activities.get(0).getActivityId();
                } else {
                    // this shouldn't happen
                }

                context.put(MetaField.TaskId, activityId);
                model.addAttribute("task", task);

                FormData formData = formService.getTaskFormData(task.getId());
                formName = formData.getFormKey();
                List<FormProperty> formProperties = formData.getFormProperties();
                for (FormProperty formProperty : formProperties) {
                    if ("jsonIn".equals(formProperty.getId())) {
                        jsonIn = formProperty.getName();
                        break;
                    }
                }
            }
            processDefinitionId = processInstance.getProcessDefinitionId();

            Map<String, Object> localVariables = runtimeService.getVariables(processInstance.getProcessInstanceId());
            context.put(MetaField.LocalVariables, localVariables);

            // debug: local variables <-- begin
            Map<String, Object> debugLocalVariables = new HashMap<>();
            localVariables.entrySet().stream().forEach((entry) -> {
                debugLocalVariables.put(entry.getKey() + " (" + ((entry.getValue() != null) ? entry.getValue().getClass().getSimpleName() : "null") + ")", entry.getValue());
            });
            model.addAttribute("localVariables", debugLocalVariables);
            // debug: local variables <-- end
        } else {
            formName = TheEndHtmlName;
            HistoricProcessInstance historicProcessInstance = historyService.createHistoricProcessInstanceQuery().processInstanceBusinessKey(job.getId().toString()).singleResult();
            processDefinitionId = historicProcessInstance.getProcessDefinitionId();
        }

        // the url to go if these's no taask left
        endUri = job.getEndUri();
        if (endUri == null || endUri.isEmpty()) {
            endUri = "/jobs/index";
        }

        if (formName != null) {
            context.put(MetaField.User, user);
            context.put(MetaField.Project, job.getProjectId());
            context.put(MetaField.Experiment, job.getExperimentId());
            context.put(MetaField.Job, job);
            context.put(MetaField.ProjectId, job.getProjectId().getId());
            context.put(MetaField.ExperimentId, job.getExperimentId().getId());
            context.put(MetaField.JobId, job.getId());
            context.put(MetaField.UserId, user.getId());

            String generatedHtml = null;
            TermName termName = new TermName(formName);
            if (termName.getUuid() != null) {
                // auto generated html
                generatedHtml = HtmlTemplate;
                Term template = termService.getTerm(termName.getUuid(), termName.getVersion(), true);
                if (template == null) {
                    throw new RuntimeException(String.format("Template does not exist: \"%s\"", termName.getName()));
                }
                String xmlTemplate = termService.convertTermToXml(template);
                String evaledXmlTemplate = cqlService.eval(xmlTemplate, context, true);
                model.addAttribute("xmlTemplate", evaledXmlTemplate);
            } else {
                // user defined html
                ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().processDefinitionId(processDefinitionId).singleResult();
                String deploymentId = processDefinition.getDeploymentId();
                List<String> resourceNames = repositoryService.getDeploymentResourceNames(deploymentId);
                if (resourceNames.contains(formName)) {
                    InputStream is = repositoryService.getResourceAsStream(deploymentId, formName);
                    BufferedInputStream bis = new BufferedInputStream(is);
                    String html;
                    try {
                        html = IOUtils.toString(bis, "UTF-8");
                    } catch (IOException ex) {
                        throw new RuntimeException("Unable to read html page: " + formName, ex);
                    }
                    generatedHtml = cqlService.eval(html, context);
                } else {
                    if (!TheEndHtmlName.equals(formName)) {
                        // throw an exception
                        throw new RuntimeException(String.format("The HTML file does not exist in workflow archive: %s", formName));
                    }
                }
            }

            String evaledJsonIn ="{}";
            if (jsonIn != null) {
                evaledJsonIn = cqlService.eval(jsonIn, context, false);
            }

            model.addAttribute("job", job);
            model.addAttribute("jsonIn", JsonTransformer.transformJson(evaledJsonIn));
            model.addAttribute("generatedHtml", generatedHtml);

            if (TheEndHtmlName.equals(formName)) {
                if (generatedHtml != null) {
                    return "jobs/end";
                } else {
                    return "redirect:" + endUri;
                }
            } else {
                return "jobs/task";
            }
        }

        // go to home page if there's no task left for the job
        return "redirect:" + endUri;
    }

    @Transactional
    @RequestMapping(value = "/task", method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String task(@RequestParam("jobId") Integer jobId, @RequestParam("taskId") String taskId, Model model, MultipartHttpServletRequest request) throws IOException {
        Job job = domainObjectService.findById(jobId, Job.class);
        if (job == null) {
            //result.addError(new ObjectError("aaa", "connot find the job"));
            return "redirect:jobs/list";
        }

        User user = (User) request.getAttribute("user");

        ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(job.getId().toString()).singleResult();

        Task task = getNextTask(processInstance, user);
        if (task == null) {
            //result.addError(new ObjectError("aaa", "connot find the job"));
            return "redirect:index";
        }

        String ignoreFormData = request.getParameter("ignoreFormData");
        if (ignoreFormData == null || !ignoreFormData.equals("true")) {
            Map<String, Object> objectuses = WebHelper.buildObjectus(request);

            // 1. validate the input
            Map<String, Object> mapErrorObjects = new HashMap<>();
            Boolean isValid = datasetService.validateValue(objectuses, mapErrorObjects);

            // 2. redisplay the form if validation fails
            if (!isValid) {
                model.addAttribute("errors", mapErrorObjects);
                return this.taskForm(jobId, model, request);
            }

            // 3. save the input to the context table (regular parameters)
            List<HistoricActivityInstance> activities = historyService.createHistoricActivityInstanceQuery().executionId(task.getExecutionId()).activityId(task.getTaskDefinitionKey()).list();
            String activityId = null;
            if (activities.size() > 0) {
                activityId = activities.get(0).getActivityId();
            } else {
                // this shouldn't happen
            }

            Map<String, Object> context = new HashMap<>();
            Integer projectId = job.getProjectId().getId();
            Integer experimentId = job.getExperimentId().getId();
            context.put(MetaField.ProjectId, projectId);
            context.put(MetaField.ExperimentId, experimentId);
            context.put(MetaField.JobId, job.getId());
            context.put(MetaField.TaskId, activityId);
            // the state set for the current step
            Integer state = (Integer) runtimeService.getVariable(processInstance.getId(), ConstDatasetState.DatasetState);
            if (state == null) {
                // otherwise use the initial state
                state = (Integer) runtimeService.getVariable(processInstance.getId(), ConstDatasetState.InitialDatasetState);
            }
            context.put(MetaField.State, state);

            String processInstanceId = processInstance.getId();

            workflowService.saveData(objectuses, processInstanceId, context);
        }

        // 4. make the task complete
        //runtimeService.signal(processInstance.getId());
        taskService.complete(task.getId());

        // update the time_updated timestamp
        job.setTimeUpdated(new Date());
        job.merge();

        return "redirect:/jobs/task/" + job.getId().toString();
    }

    @RequestMapping(value = "/status/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResponseBody
    public Object status(@PathVariable("id") Integer id, HttpServletRequest request, HttpServletResponse response) {
        Job job = domainObjectService.findById(id, Job.class);
        if (job == null) {
            throw new RuntimeException(String.format("No job exists with Job ID: %d", id));
        }

        ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(id.toString()).singleResult();
        User user = (User) request.getAttribute("user");
        Task task = getNextTask(processInstance, user);

        Map<String, Object> status = new HashMap<>();
        status.put("status", job.getStatusId());
        status.put("runnable", task != null);

        return status;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResponseBody
    public Object showJson(@PathVariable("id") Integer id, HttpServletRequest request, HttpServletResponse response) {
        return WebJsonHelper.show(id, request, response, Job.class);
    }

    @RequestMapping(value = "/json/list", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResponseBody
    public List<Map<String, Object>> getJsonList(@RequestParam(value = "start", required = false) Integer firstResult, @RequestParam(value = "count", required = false) Integer maxResults, @RequestParam(value = "status", defaultValue = "", required = false) String status, @RequestParam(value = "dateFilter", required = false) String dateFilter, HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getAttribute("user");

        Integer[] a = WebHelper.getDojoGridPaginationInfo(request);
        firstResult = a[0];
        maxResults = a[1] - firstResult + 1;

        Session session = DomainObjectHelper.getHbmSession();

        boolean running = true, finished = false, cancelled = false;
        if (!StringUtils.isBlank(status)) {
            List<Boolean> listStatus = Helper.deserialize("[" + status + "]", List.class);
            if (listStatus.size() == 3) {
                running = listStatus.get(0) == null ? false : listStatus.get(0);
                finished = listStatus.get(1) == null ? false : listStatus.get(1);
                cancelled = listStatus.get(2) == null ? false : listStatus.get(2);
            }
        }
        List<Integer> jobStatus = new ArrayList<>();
        if (!(running && finished && cancelled)) {
            if (running) {
                jobStatus.add(EnumJobStatus.CREATED.getIndex());
                jobStatus.add(EnumJobStatus.SUBMITTED.getIndex());
                jobStatus.add(EnumJobStatus.STARTED.getIndex());
            }
            if (finished) {
                jobStatus.add(EnumJobStatus.FINISHED.getIndex());
            }
            if (cancelled) {
                jobStatus.add(EnumJobStatus.CANCELED.getIndex());
            }
            if (jobStatus.isEmpty()) {
                jobStatus.add(EnumJobStatus.NONE.getIndex());
            }
        }
        if (!jobStatus.isEmpty()) {
            session.enableFilter("jobStatusFilter").setParameterList("statusIds", jobStatus);
        }

        if (dateFilter != null) {
            Map<String, Long> map = Helper.deserialize(dateFilter, Map.class);
            session.enableFilter("timeBetweenFilter").setParameter("beginTime", new Date(map.get("start"))).setParameter("endTime", new Date(map.get("end")));
        }

        Entry<String, String> orderBy = WebHelper.getDojoJsonRestStoreOrderBy(request.getParameterNames());
        Map<String, Object> where = WebHelper.FromJsonToFilterClass(request.getParameter("filter"));
        List<Job> items = domainObjectService.findEntries(firstResult, maxResults, orderBy, where, Job.class);
        Integer totalCount = domainObjectService.countEntries(where, Job.class).intValue();

        List<Map<String, Object>> ssItems = new ArrayList<>();
        for (Job item : items) {
            String url;

            url = request.getContextPath() + "/jobs/" + item.getId();
            String name = "<a href=" + "\"" + url + "\"" + ">" + item.getName() + "</a>";

            ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(item.getId().toString()).singleResult();
            String action = "";
            if (processInstance != null) {
                Task task = getNextTask(processInstance, user);
                if (task != null) {
                    url = request.getContextPath() + "/jobs/task/" + item.getId().toString();
                    action = "<a href=" + "\"" + url + "\"" + ">" + task.getName() + "</a>";
                } else {
                    Execution execution = runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).singleResult();
                    List<HistoricActivityInstance> activities = historyService.createHistoricActivityInstanceQuery().executionId(execution.getId()).unfinished().list();
                    if (activities.size() > 0) {
                        action = activities.get(0).getActivityName();
                    }
                }
            }

            Map<String, Object> nvp = new HashMap<>();
            nvp.put("id", item.getId().toString());
            nvp.put("name", name);
            nvp.put("workflowId.name", item.getWorkflowId() == null ? "" : item.getWorkflowId().getName());
            nvp.put("projectId.name", item.getProjectId() == null ? "" : item.getProjectId().getName());
            nvp.put("experimentId.name", item.getExperimentId() == null ? "" : item.getExperimentId().getName());
            nvp.put("timeCreated", item.getTimeCreated().getTime());
            nvp.put("timeUpdated", item.getTimeUpdated().getTime());
            nvp.put("statusId.name", EnumJobStatus.values()[item.getStatusId()]);
            nvp.put("actionNeeded", action);
            ssItems.add(nvp);
        }

        WebHelper.setDojoGridPaginationInfo(firstResult, firstResult + (ssItems.size() - 1), totalCount, response);

        return ssItems;
    }

    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResponseBody
    public String listJson(HttpServletRequest request, HttpServletResponse response) {
        return WebJsonHelper.list(request, response, Job.class);
    }

    private Job createJob(String initParams, Map<String, String> paramMap, Job job, User user) throws NumberFormatException, InvocationTargetException {
        String projectId = paramMap.get("projectId");
        String experimentId = paramMap.get("experimentId");
        String workflowId = paramMap.get("workflowId");
        Project project = domainObjectService.findById(Integer.parseInt(projectId), Project.class);
        Experiment experiment = domainObjectService.findById(Integer.parseInt(experimentId), Experiment.class);
        Workflow workflow = domainObjectService.findById(Integer.parseInt(workflowId), Workflow.class);

        Map<String, Object> context = new HashMap<>();
        context.put(MetaField.Project, project);
        context.put(MetaField.Experiment, experiment);
        context.put(MetaField.User, user);
        context.put(MetaField.ProjectId, project.getId());
        context.put(MetaField.ExperimentId, experiment.getId());
        context.put(MetaField.UserId, user.getId());

        String name = cqlService.eval(paramMap.get("name"), context);
        String description = cqlService.eval(paramMap.get("description"), context);

        // Priority
        //     1. request body
        //     2. initParams in request parameters
        //     3. all request parameters
        if (initParams == null || initParams.isEmpty() || "{}".equals(initParams) || (!initParams.startsWith("{") || !initParams.endsWith("}"))) {
            if (paramMap.containsKey("initParams")) {
                initParams = paramMap.get("initParams");
            } else {
                initParams = Helper.serialize(paramMap);
            }
        }

        String endUri = paramMap.get("endUri");

        if (job == null) {
            job = new Job();
        }
        job.setStatusId(EnumJobStatus.CREATED.getIndex());
        job.setProjectId(project);
        job.setExperimentId(experiment);
        job.setWorkflowId(workflow);
        job.setName(name == null ? "Auto created" : name);
        job.setDescription(description);
        job.setParameters(initParams);
        job.setEndUri(endUri);

        job.persist();

        return job;
    }

    private Task getNextTask(ProcessInstance processInstance, User user) {
        Task task = null;
        if (processInstance != null && user != null) {
            TaskQuery taskQuery = taskService.createTaskQuery();
            taskQuery.processInstanceId(processInstance.getId());
            List<Task> tasks = taskQuery.list();
            if (!tasks.isEmpty()) {
                List<IdentityLink> identityLinks = taskService.getIdentityLinksForTask(tasks.get(0).getId());
                if (identityLinks.isEmpty()) {
                    // no candidate user/group is assigned. everyone can run the task
                    task = tasks.get(0);
                } else {
                    // otherwise...
                    if (user.isAdmin()) {
                        // admin can run any task
                        task = tasks.get(0);
                    } else {
                        // anyone else
                        taskQuery.taskCandidateUser(user.getUsername());
                        List<Task> myTasks = taskQuery.list();
                        if (!myTasks.isEmpty()) {
                            task = myTasks.get(0);
                        } else {
                            // check groups
                            List<Group> groups = user.getMemberGroups();
                            List<String> sGroups = new ArrayList<>();
                            for (Group group : groups) {
                                sGroups.add(group.getName());
                            }
                            TaskQuery taskQueryGroup = taskService.createTaskQuery();
                            taskQueryGroup.processInstanceId(processInstance.getId());
                            taskQueryGroup.taskCandidateGroupIn(sGroups);
                            myTasks = taskQueryGroup.list();
                            if (!myTasks.isEmpty()) {
                                task = myTasks.get(0);
                            }
                        }
                    }
                }
            }
        }

        return task;
    }

}
