<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.1" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/projects" var="urlStore"/>
    
    <!-- Scripts for the TinyMCE Rich Text Editor -->
    <script src="${jsRoot}/tinymce/tinymce.min.js" type="text/javascript"><!-- --></script>
    <script src="${jsRoot}/tinymce/angular-ui-tinymce/tinymce.min.js" type="text/javascript"><!-- --></script>

    <div style="display: none;">
        <h4>TODO: Users can put general, project specific, experiment specific, job specific, dataset specific, subject specific, equipment specific comments/notes/discussion. These information can be either private (to the user) or public (to the project) </h4>
        <h4>TODO: Each project/experiment has a wiki-like page where all the facts/discoveries are posted, and interesting links/articles are referenced</h4>
        <hr/>
    </div>
    
    <div id="idProject" data-ng-controller="projectController">
        <div class="row">
            <div id="projectsView" class="col-xs-12 col-sm-10 col-md-5 col-sm-offset-1">
                <h2>Projects</h2>
                <div class="row">
                    <div class="col-md-5">
                        <div>
                            <button type="button" class="btn btn-primary" ng-click="createNewProject()">New</button>
                            &amp;nbsp;&amp;nbsp;
                            <button type="button" class="btn btn-warning" ng-click="toggleDeprecate()" ng-disabled="!selectedRecord">{{record.statusId === 0 ? "Restore" : "Deprecate"}}</button>
                        </div>
                    </div>
                    <div class="col-md-7 text-right">
                        <br class="hidden-xs hidden-sm"/>
                        Show:&amp;nbsp;
                        <span style="display: inline-block;"><cris-radio-button-group name="projectsStatus" orientation="horizontal" items="{Operational: '1', Deprecated: '0', All: ''}" data-ng-model="status"><!-- --></cris-radio-button-group></span>
                    </div>
                </div>
                <br />
                <cris-ui-grid column-defs="gridColumnDefs" url="url" grid-ref="gridRef" enable-filtering="true" row-select-callback="rowSelectCallback(rowData)" format-display-value="formatDisplayValue(value,rowData,isDate)"><!----></cris-ui-grid>
            </div>
            <div id="detailsView" class="col-xs-12 col-sm-10 col-md-5 hidden-xs hidden-sm">
                <div class="hidden-md hidden-lg">
                    <button type="button" class="btn btn-default" ng-click="toggleDetailsView(null, true)"><span class="glyphicon glyphicon-chevron-left"></span>&amp;nbsp;Back to Projects List</button>
                </div>
                <h2>Details</h2>
                <div class="text-center">{{currentAction}}</div>
                <div ng-show="selectedRecord || isNewProject">
                    <table class="table table-striped">
                        <tr>
                            <td style="width: 30%">ID:</td>
                            <td style="width: 70%">{{record.id}}</td>
                        </tr>
                        <tr>
                            <td>Name:</td>
                            <td><input type="text" ng-model="record.name" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Is Public:</td>
                            <td>
                                <cris-radio-button-group name="projectPublicStatus" orientation="horizontal" items="{'Public': true, 'Non Public': null}" data-ng-model="record.isPublic"><!-- --></cris-radio-button-group>
                            </td>
                        </tr>
                        <tr>
                            <td>Status:</td>
                            <td>{{statusIdToName(record.statusId)}}</td>
                        </tr>
                        <tr>
                            <td>Time Created:</td>
                            <td>{{getTimeCreated(record)}}</td>
                        </tr>
                        <tr>
                            <td>Last Updated:</td>
                            <td>{{getLastUpdated(record)}}</td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <div style="width:100%;" class="text-center">Description</div>
                                <span ui-tinymce="tinymceOptions" ng-model="record.description"><!----></span>
                            </td>
                        </tr>
                    </table>
                    <div class="pull-right">
                        <button type="button" class="btn btn-primary" ng-click="save()">Save</button>
                        &amp;nbsp;
                        <button type="button" class="btn btn-primary" ng-click="reset()">Reset</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    
    <script type="text/javascript">
    // <![CDATA[
        angular.module('crisProject', ["angular-dojo","ui.tinymce"]).controller('projectController', ['$scope', '$http', '$uibModal', function ($scope, $http, $uibModal){
            $scope.status = 1; // Operational projects
            $scope.url = "${urlStore}" + '/?' + 'showAllStatus=true&filter={"op":"equal","data":[{"op":"number","data":"statusId","isCol":true},{"op":"number","data":1,"isCol":false}]}&sort(+name)';

            $scope.gridColumnDefs = [
                {field: 'statusId', name: 'statusId', displayName: 'Status ID', visible: false, width: 80},
                {field: 'id', name: 'id', displayName: 'ID', width: 60},
                {field: 'name', name: 'name', displayName: 'Name', minWidth: 160},
                {field: 'timeUpdated', name: 'timeUpdated', displayName: 'Last Updated', enableFiltering: false, width: 115, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({value:COL_FIELD,rowData:row.entity,isDate:true}) CUSTOM_FILTERS}}</div>'}
            ];
            
            // Settings for the TinyMCE text editor
            $scope.tinymceOptions = {
                menubar: false,
                statusbar: false,
                height:200
            }
            clearDetails();
                    
            $scope.formatDisplayValue = function (value, rowData, isDate) {
                if (isDate) {
                    return value ? dateIsoToLocale(value.$date) : "";
                }
            };
            
            $scope.$watch('status', function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    if (newValue === "") { // all
                        $scope.url = "${urlStore}" + '/?showAllStatus=true&sort(+name)';
                    } else { // Operational or Deprecated
                        $scope.url = "${urlStore}" + '/?' + 'showAllStatus=true&filter={"op":"equal","data":[{"op":"number","data":"statusId","isCol":true},{"op":"number","data":' + newValue + ',"isCol":false}]}&sort(+name)';
                    }
                    clearDetails();
                    refreshGrid();
                }
            });
            
            // Clear reference to selected record during pagination
            $scope.$watch('gridRef.grid.selection.selectedCount', function (newValue, oldValue) {
                if (newValue !== oldValue && newValue === 0) {
                    $scope.selectedRecord = null;
                }
            });
            
            $scope.rowSelectCallback = function (rowData) {
                $scope.currentAction = "Edit an existing project";
                $scope.isNewProject = false;
                
                $scope.record = angular.copy(rowData);
                $scope.selectedRecord = rowData;
                $scope.toggleDetailsView(true);
            };
            
            $scope.statusIdToName = function (statusId) {
                return (typeof statusId !== 'undefined') ? convertAssetStatusIdToName(statusId) : "";
            };
            
            $scope.getTimeCreated = function (record) {
                return record && record.timeCreated && record.timeCreated.$date ? dateIsoToLocale(record.timeCreated.$date) : "";
            };
            
            $scope.getLastUpdated = function (record) {
                return record && record.timeUpdated && record.timeUpdated.$date ? dateIsoToLocale(record.timeUpdated.$date) : "";
            };
            
            $scope.createNewProject = function () {
                $scope.currentAction = "Create a new project";
                $scope.isNewProject = true;
                clearSelected();
                $scope.record = {name: null, description: null, isPublic: null};
                $scope.toggleDetailsView(true);
            };
            
            $scope.toggleDeprecate = function () {
                if ($scope.selectedRecord) {
                    var status;
                    if ($scope.selectedRecord.statusId === 1) {
                        status = 0;
                    } else {
                        status = 1;
                    }

                    $scope.selectedRecord.statusId = status;
                    $http({
                        url: "${urlStore}" + "/" + $scope.selectedRecord.id,
                        method: 'PUT',
                        data: $scope.selectedRecord
                    }).then(function successCallback(result) {
                        refreshGrid();
                        clearDetails();
                    }, function errorCallback(error) {

                    });
                }
            };
            
            $scope.save = function () {
                var data;
                var method;
                if ($scope.isNewProject) {
                    if (!$scope.record.name) {
                        showMessageModal({uibModal: $uibModal, message: "You must specify a name for the project"});
                        return;
                    }
                    data = $scope.record;
                    method = "POST";
                } else {
                    if ($scope.selectedRecord) {
                        if (!isModified()) {
                            showMessageModal({uibModal: $uibModal, message: "No change is made"});
                            return;
                        }
                        data = $scope.selectedRecord;
                        data.name = $scope.record.name;
                        data.isPublic = $scope.record.isPublic;
                        data.description = $scope.record.description;
                        method = "PUT";
                    } else {
                        showMessageModal({uibModal: $uibModal, message: "Please select a project"});
                        return;
                    }
                }
                $scope.isNewProject = false;
                
                $http({
                    url: "${urlStore}" + (method === "PUT" ? "/" + data.id : ""),
                    method: method,
                    data: data
                }).then(function successCallback(result) {
                    refreshGrid(true);
                }, function errorCallback(error) {
                    
                });
            };
            
            $scope.reset = function () {
                if ($scope.selectedRecord) {
                    $scope.record = angular.copy($scope.selectedRecord);
                } else {
                    $scope.record = {};
                }
            };
            
            // On smaller screens toggle between projects view and details view
            $scope.toggleDetailsView = function (doShow, clearSelection) {
                if (doShow) {
                    $('#detailsView').removeClass('hidden-xs hidden-sm');
                    $('#projectsView').addClass('hidden-xs hidden-sm');
                } else {
                    $('#detailsView').addClass('hidden-xs hidden-sm');
                    $('#projectsView').removeClass('hidden-xs hidden-sm');
                    if (clearSelection) {
                        clearSelected();
                    }
                }
            }
            
            function refreshGrid (restoreSelection) {
                if ($scope.gridRef) {
                    if (restoreSelection && $scope.selectedRecord) {
                        var selectedId = $scope.selectedRecord.id;
                        $scope.gridRef.refreshGrid(function () {
                            $scope.gridRef.selectRow(selectedId, "id");
                        });
                    } else {
                        $scope.gridRef.refreshGrid();
                    }
                }
            }
            
            function clearSelected () {
                if ($scope.gridRef) {
                    $scope.gridRef.clearSelection();
                }
                $scope.selectedRecord = null;
            }
            
            function clearDetails () {
                $scope.record = {isPublic: null};
                $scope.currentAction = "No project selected";
            }
            
            function isModified () {
                var modified = false;
                if ($scope.record.name !== $scope.selectedRecord.name) {
                    modified = true;
                }
                if ($scope.record.isPublic !== $scope.selectedRecord.isPublic) {
                    modified = true;
                }
                if ($scope.record.description !== $scope.selectedRecord.description) {
                    modified = true;
                }
                return modified;
            }   
        }]);
        cris.bootstrapAngular("idProject", "crisProject");
// ]]>
    </script>

</jsp:root>
