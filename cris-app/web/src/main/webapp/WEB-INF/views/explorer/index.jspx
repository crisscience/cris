<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.1"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:spring="http://www.springframework.org/tags"
          >

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/viewpjtds/" var="urlViewpjtds"/>
    <spring:url value="/download/" var="urlDownload"/>
    <spring:url value="/templates/" var="urlTemplates"/>
    <spring:url value="/users/" var="urlUsers"/>
    <spring:url value="/templates/terms" var="urlTemplateTerms"/>
    <spring:url value="/projects/search/" var="urlSearch"/>
    
    <div id="idExplorer" data-ng-controller="crisExplorerController" style="white-space: nowrap;">
        <div style="display:inline-block;width:22%;max-height:672px;overflow:auto;" ng-show="expanded">
            <div id="treeDataset"><!-- --></div>
        </div>
        <div style="display:inline-block;vertical-align:top;margin-right:2px;margin-left:2px;">
            <button type="button" class="btn btn-default" ng-click="togglePaneDisplay()" ng-class="expanded ? 'glyphicon glyphicon-chevron-left' : 'glyphicon glyphicon-chevron-right'"></button>
        </div>
        <div style="width:{{expanded ? '74%' : '96%'}};display:inline-block;vertical-align:top;">
            <div>
                <cris-ui-grid column-defs="gridColumnDefs" grid-ref="gridRef" url="url" url-filter="urlFilter" sort-field="sortField" enable-filtering="false" row-select-callback="rowSelectCallback(rowData)" format-display-value="formatDisplayValue(name,rowData)"><!----></cris-ui-grid>
            </div>
            
            <br />
            <div ng-if="details.projectName">
                Project: {{details.projectName}} &amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; Experiment: {{details.experimentName}} &amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; Job: {{details.jobName}}
            </div>
            <hr />
            
            <cris-dataset term="term" dataset="context" context="context" read-only="true" override-hidden="true"><!----></cris-dataset>
        </div>
    </div>
    
    <c:set value="${jsRoot}/dm/dataset.js" var="url" />
    <script src="${url}" type="text/javascript"><!-- required for FF3 and Opera --></script>

    <script type="text/javascript">
        angular.module("crisExplorer", ["dataset"]);
    </script>

    <script type="text/javascript">
        //<![CDATA[
        cris.require('dijit/Tree');
        cris.require("dojo/store/JsonRest");
        cris.require("dojo/json");
        cris.require("dojox/xml/parser");
        
        angular.module("crisExplorer").controller("crisExplorerController", function($scope, $http) {
            resetScopeData(); // clear data displayed by cris-dataset
            
            // toggling display of tree pane
            $scope.expanded = true;
            $scope.togglePaneDisplay = function () {
                if ($scope.expanded)  {
                    $scope.expanded = false;
                } else {
                    $scope.expanded = true;
                }
            }
            
            //ui-grid column definitions
            $scope.gridColumnDefs = [
                {field: 'projectId', name: 'Project ID', displayName: 'Project ID', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'experimentId', name: 'Experiment ID', displayName: 'Experiment ID', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'jobId', name: 'Job ID', displayName: 'Job ID', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'taskId', name: 'Task ID', displayName: 'Task ID', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'dataId', name: 'Data ID', displayName: 'Data ID', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'projectName', name: 'Project', enableSorting: true, minWidth: 200, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'experimentName', name: 'Experiment', enableSorting: true, minWidth: 200, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'jobName', name: 'Job', enableSorting: true, minWidth: 200, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'taskName', name: 'Task', enableSorting: true, minWidth: 200, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'dataTermUuid', name: 'Term UUID', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'dataTermVersion', name: 'Term Version', enableSorting: true, minWidth: 200, visible: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'dataName', name: 'Name', enableSorting: true, minWidth: 200, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'},
                {field: 'dataValue', name: 'Value', enableSorting: true, minWidth: 200, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({name:COL_FIELD,rowData:row.entity}) CUSTOM_FILTERS}}</div>'}
            ];
            
            $scope.rowSelectCallback = function (rowData) {
                if (rowData.dataValue !== "[ ]" && rowData.dataValue !== null && rowData.dataValue.indexOf(":") !== -1) {
                    var valueJson = dojo.fromJson(rowData.dataValue);
                    
                    var scope = getAngularElementScope("idExplorer");
                    scope.context = valueJson[0];
                    scope.term = getTerm(rowData.dataTermUuid.$uuid, rowData.dataTermVersion.$uuid, true);
                    scope.details = {};
                    scope.details.projectName = rowData.projectName;
                    scope.details.experimentName = rowData.experimentName;
                    scope.details.jobName = rowData.jobName;
                    scope.$apply();
                } else {
                    resetScopeData(true);
                }
            }
            $scope.url = cris.baseUrl + 'viewpjtds';
            
            $scope.$watch('filterItem', function (newValue, oldValue) {
                var field;
                var value;
                if (newValue) {
                    value = newValue.value;
                    field = newValue.field;
                    if (newValue.field === "projectId") {
                        $scope.gridColumnDefs[5].visible = false;
                        $scope.gridColumnDefs[6].visible = true;
                        $scope.gridColumnDefs[7].visible = true;
                        $scope.gridColumnDefs[8].visible = true;
                    } else if (newValue.field === "experimentId") {
                        $scope.gridColumnDefs[5].visible = false;
                        $scope.gridColumnDefs[6].visible = false;
                        $scope.gridColumnDefs[7].visible = true;
                        $scope.gridColumnDefs[8].visible = true;
                    } else if (newValue.field === "jobId") {
                        $scope.gridColumnDefs[5].visible = false;
                        $scope.gridColumnDefs[6].visible = false;
                        $scope.gridColumnDefs[7].visible = false;
                        $scope.gridColumnDefs[8].visible = true;
                    } else if (newValue.field === "taskId") {
                        $scope.gridColumnDefs[5].visible = false;
                        $scope.gridColumnDefs[6].visible = false;
                        $scope.gridColumnDefs[7].visible = false;
                        $scope.gridColumnDefs[8].visible = false;
                    }
                } else {
                    $scope.gridColumnDefs[5].visible = true;
                    $scope.gridColumnDefs[6].visible = true;
                    $scope.gridColumnDefs[7].visible = true;
                    $scope.gridColumnDefs[8].visible = true;
                }
                
                $scope.urlFilter = (field ? '{"op":"equal","data":[{"op":"number","data":"' + field + '","isCol":true},{"op":"number","data":' + value + ',"isCol":false}]}' : '');
                $scope.sortField = field;
                
                if ($scope.gridRef) {
                    $scope.gridRef.refreshGrid();
                }
            });
            
            $scope.formatDisplayValue = function (name, rowData) {
                var result = name;
                if (name === null || name === undefined){
                    result = "";
                } else if (name.trim().replace(' ', '') === "[]" || name.trim().replace(' ', '') === '{}') {
                    result = "";
                } else if ((name.trim().startsWith('[') && name.trim().endsWith(']')) || (name.trim().startsWith('{') && name.trim().endsWith('}'))) {
                    result = "Click for Values";
                }
                return result;
            };
        });
        
        function resetScopeData(apply) {
            var scope = getAngularElementScope("idExplorer");
            scope.term = {};
            scope.context = {};
            scope.details = {};
            
            if (apply) {
                scope.$apply();
            }
        }

        cris.ready(function() {
            var storeProjects = new dojo.store.JsonRest({
                target: "${urlViewpjtds}",
                idAttribute: "id",
                value: "",
                valueJSON: "",
                htmlColumn: "",
                htmlRow:"",
                getIdentity: function(object) {
                    return object.id;
                },
                getLabel: function(object) {
                    return object.name;
                },
                mayHaveChildren: function(object) {
                    if (object.type === "job") {
                        return false;
                    } else {
                        if ("children" in object) {
                            return  object.children;
                        } else {
                            return  false;
                        }
                    }
                },
                getRoot: function(onItem, onError) {
                    this.get("root").then(onItem, onError);
                },
                getChildren: function(object, onComplete, onError) {
                    var url = object.type ? (object.type + "/" + object.id) : "project/" + object.id;
                    this.get(url).then(function(fullObject){
                        object.children = fullObject.children;
                        onComplete(fullObject.children);
                    }, onError);
                }
            });

            var tree = new dijit.Tree({
                model: storeProjects,
                showRoot: false,
                onClick: function(item) {
                    resetScopeData(true);
                },
                getIconClass: function(item, opened) {
                    var iconClass;
                    switch (item.type) {
                    case "project":
                        iconClass = "projectIcon";
                        break;
                    case "experiment":
                        iconClass = "experimentIcon";
                        break;
                    case "job":
                        if (item.children) {
                            iconClass = "jobHasDataIcon";
                        } else {
                            iconClass = "jobNoDataIcon";
                        }
                        break;
                    default:
                        iconClass = "jobIcon";
                    }
                    return iconClass;
                }
            }, "treeDataset");
            tree.startup();

            dojo.connect(tree, "onClick", function(item) {
                var filter;
                if (item.type === "project") {
                    filter = {field: "projectId", value: item.id};
                } else if (item.type === "experiment") {
                    filter = {field: "experimentId", value: item.id};
                } else if (item.type === "job") {
                    filter = {field: "jobId", value: item.id};
                } else if (item.type === "task") {
                    filter = {field: "taskId", value: item.id};
                } else {
                    filter = null;
                }
                
                var scope = getAngularElementScope("idExplorer");
                scope.filterItem = filter;
                scope.$apply();
            });

            // keep this last
        });

        cris.bootstrapAngular("idExplorer", "crisExplorer");
        //]]>
    </script>

</jsp:root>
