<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.1" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/reports" var="url"/>
    <spring:url value="/reports/import" var="urlImport"/>
    <spring:url value="/reports/export" var="urlExport"/>
    <spring:url value="/reports/run" var="urlRun"/>
    <spring:url value="/reports/parameters" var="urlParameters"/>
    <spring:url value="/templates/json/names/?sort(+name)" var="urlTempNames"/>
    <spring:url value="/download/" var="urlDownload"/>
    
    
    <div id="idReport" data-ng-controller="ReportController">
        <div class="row">
            <div class="col-xs-12 col-sm-10 col-md-5 col-sm-offset-1">
                <div class="hidden-md hidden-lg"  ng-show="selectedRecord">
                    <button type="button" class="btn btn-default" ng-click="toggleDetailsView(null, true)"><span class="glyphicon glyphicon-chevron-left"></span>&amp;nbsp;Back to Reports List</button>
                </div>
                <h2>Import Report</h2>
                <div class="form-group">
                    <label>Report File:&amp;nbsp;&amp;nbsp;</label>
                    <div style="display: inline-block;">
                        <form method="POST" ng-submit="uploadFile()">
                            <div style="display:inline-block;">
                                <cris-file-uploader ng-model="dummyFile" path="reportToUpload" is-multiple="false"></cris-file-uploader>
                            </div>
                            &amp;nbsp;
                            <div style="display:inline-block;vertical-align: top;">
                                <button type="submit" class="btn btn-primary" ng-disabled="!fileToUpload">Upload</button>
                            </div>
                            &amp;nbsp;
                            <div style="display:inline-block;vertical-align: top;">
                                <button type="button" class="btn btn-primary" ng-click="resetUploader()" ng-disabled="!fileToUpload">Reset</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div id="reportsView" class="col-xs-12 col-sm-10 col-md-5 col-sm-offset-1">
                <h2>Reports</h2>
                <cris-ui-grid column-defs="gridColumnDefs" url="url" grid-ref="gridRef" enable-filtering="true" sort-field="sortField" sort-direction="asc" row-select-callback="rowSelectCallback(rowData)" format-display-value="formatDisplayValue(value,rowData,isDate)"><!----></cris-ui-grid>
            </div>
            <div id="detailsView" class="col-xs-12 col-sm-10 col-md-5 hidden-xs hidden-sm">
                <h2>Details</h2>
                <div ng-show="selectedRecord">
                    <table class="table table-striped">
                        <tr>
                            <td style="width: 30%">ID:</td>
                            <td style="width: 70%">{{record.id}}</td>
                        </tr>
                        <tr>
                            <td>Name:</td>
                            <td>{{record.name}}</td>
                        </tr>
                        <tr>
                            <td>Description:</td>
                            <td>{{record.description}}</td>
                        </tr>
                        <tr>
                            <td>Version Number:</td>
                            <td>{{record.versionNumber}}</td>
                        </tr>
                        <tr>
                            <td>Time Created:</td>
                            <td>{{getTimeCreated(record)}}</td>
                        </tr>
                        <tr>
                            <td>Last Updated:</td>
                            <td>{{getLastUpdated(record)}}</td>
                        </tr>
                        <tr>
                            <td>Export:</td>
                            <td><a href="${urlExport}/{{record.id}}" ng-show="record">{{record.name}}</a></td>
                        </tr>
                        <tr>
                            <td></td>
                            <td><button type="button" class="btn btn-primary" ng-click="generateReport()" ng-disabled="!record.id">Generate Report</button></td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <script type="text/javascript">
        // <![CDATA[
        angular.module('crisReport', ["angular-dojo"]).controller('ReportController', ['$scope', '$http', '$uibModal', function ($scope, $http, $uibModal){
            // Uploader emits this event with the list of files to upload. We need the files for manipulating the request payload
            $scope.$on('FilesToUpload', function (event, data) {
                if (data.uploaderName === 'reportToUpload') {
                    $scope.fileToUpload = data.fileList[0];
                }
            });
            
            $scope.url = "${url}"; // reports url
            $scope.gridColumnDefs = [
                {field: 'id', name: 'id', displayName: 'ID', width: 60},
                {field: 'name', name: 'name', displayName: 'Name', minWidth: 160},
                {field: 'timeUpdated', name: 'timeUpdated', displayName: 'Last Updated', enableFiltering: false, width: 115, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.formatDisplayValue({value:COL_FIELD,rowData:row.entity,isDate:true}) CUSTOM_FILTERS}}</div>'}
            ];
            $scope.sortField = 'name';
            $scope.record = {};
            
            // File types
            $scope.outputFileTypes = [
                                        {id: "zip", name: "html"},
                                        {id: "pdf", name: "pdf"},
                                        {id: "rtf", name: "rtf"},
                                        {id: "xls", name: "xls"},
                                        {id: "xlsx", name: "xlsx"}
                                    ];
            $scope.selectedType = "pdf"; // default file type
            
            // report uploader
            $scope.uploadFile = function () {
                if ($scope.fileToUpload) {
                    showYesNoModal({
                        message: 'Do you want to import the report file?', 
                        okCallback: function(){
                            var progressModal = showProgressModal({uibModal: $uibModal});
                            $http({
                                method: 'POST',
                                url: '${urlImport}',
                                headers: {'Content-Type': undefined}, // This is needed because we are manually appending file data to the request payload
                                transformRequest: function (data) {
                                    // We need to manually append file data to request data since server handling of file is expecting submission of a form containing the file.
                                    var formData = new FormData();
                                    formData.append('detailFileName', data.file);
                                    return formData;
                                },
                                data: {
                                    file: $scope.fileToUpload
                                }
                            }).then(function(success){
                                progressModal.close();
                                var response = success.data;
                                if (response.error) {
                                    showMessageModal({uibModal: $uibModal, message: "Error: " + response.error});
                                } else {
                                    $scope.record = {};
                                    $scope.resetUploader();
                                    refreshGrid();
                                }
                            }, function(error){
                                progressModal.close();
                                showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + error.data.message});
                            });
                        },
                        uibModal: $uibModal
                    });
                } else {
                    showMessageModal({uibModal: $uibModal, message: "Please select a report file (*.prpt)."});
                }
            };
            
            $scope.formatDisplayValue = function (value, rowData, isDate) {
                if (isDate) {
                    return dateIsoToLocale(value.$date);
                }
            };
            
            $scope.rowSelectCallback = function (rowData) {
                $scope.record = angular.copy(rowData);
                $scope.selectedRecord = rowData;
                $scope.toggleDetailsView(true);
            };
            
            $scope.generateReport = function () {
                // first fetch parameters pertaining to the selected report record
                $http({
                    method: 'GET',
                    url: "${urlParameters}/" + $scope.record.id,
                    transformResponse: function (data, headersGetter, status) {
                        // Some reponse jsons are malformed, e.g. { head: 'class java.lang.String', subhead: 'class java.lang.String' }, 
                        // which causes json-to-object conversion by the default $http transformer to fail. We therefore need to correct these malformed jsons here before converting them to objects.
                        data = data.replace(/ /g, '').replace(/([\w\-\.]+)(?=(\:|\}))/g, '"$1"').replace(/'/g, '"');
                        var transformed = JSON.parse(data);
                        return transformed;
                    },
                }).then(function (success) {
                    var data = success.data;
                    $scope.parameters = data;
                    var parametersTemplate = '';
                    for (var key in data) {
                        parametersTemplate += '<tr><td style="vertical-align:middle;">' + key + '</td><td><input id="' + key + '" type="text" value="" class="form-control"/></td></tr>'
                    }
                    
                    $scope.useEmbedded = true; // use embedded uuid for template
                    // Now open report generator dialog
                    var modalTemplate = '<div> \
                                            <div class="modal-header bg-info text-center"><h4>Generate Report</h4></div> \
                                            <div class="modal-body"> \
                                                <table class="table"> \
                                                    <tr> \
                                                        <td style="width:20%;vertical-align:middle;">Template:</td>  \
                                                        <td> \
                                                            <div class="form-horizontal"> \
                                                                <input type="checkbox" ng-model="useEmbedded" ng-true-value="true" ng-false-value="false" class="checkbox-inline" /> \
                                                                <label style="display:initial;">&nbsp;Use Embedded UUID</label> \
                                                            </div><br /> \
                                                            <div ng-hide="useEmbedded"> \
                                                                <cris-url-dropdown url="${urlTempNames}" ng-model="selectedTemplate" id-field="id" name-field="name"></cris-url-dropdown> \
                                                            </div> \
                                                        </td> \
                                                    </tr> \
                                                    <tr> \
                                                        <td style="vertical-align:middle;">Output File Type:</td> \
                                                        <td> \
                                                            <cris-dropdown items="{{outputFileTypes}}" ng-model="selectedType"></cris-dropdown> \
                                                        </td> \
                                                    </tr> \
                                                    ' + parametersTemplate + ' \
                                                </table> \
                                            </div> \
                                            <div class="modal-footer"> \
                                                <span class="pull-left"><input type="button" value="Generate" class="btn btn-primary" ng-click="ok()" /></span> \
                                                <span class="pull-right"><input type="button" value="Cancel" class="btn btn-warning" ng-click="cancel()" /></span> \
                                            </div> \
                                        </div>';
                    $uibModal.open({
                        animation: true,
                        template: modalTemplate,
                        scope: $scope,
                        size: 'md',
                        controller: function ($scope, $uibModalInstance) {
                            $scope.ok = function () { // Callback to finally generate report
                                var embedded = $scope.useEmbedded;
                                var uuid = $scope.selectedTemplate;
                                var type = $scope.selectedType;
                                var url = "${urlRun}/" + $scope.record.id + (type ? "/?outputType=" + type : "/?");
                                if (!embedded) {
                                    url += (uuid ? "&uuid=" + uuid : "") ;
                                }
                                if ($scope.parameters) {
                                    for (var key in $scope.parameters) {
                                        var val = $('#' + key).val();
                                        if (val !== '') {
                                            url += "&" + key + "=" + val;
                                        }
                                    }
                                }
                                window.location.assign(url);
                                
                                $uibModalInstance.close();
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss();
                            };
                        }
                    });
                }, function (error) {
                    
                });
            }
            
            // On smaller screens toggle between projects view and details view
            $scope.toggleDetailsView = function (doShow, clearSelection) {
                if (doShow) {
                    $('#detailsView').removeClass('hidden-xs hidden-sm');
                    $('#reportsView').addClass('hidden-xs hidden-sm');
                } else {
                    $('#detailsView').addClass('hidden-xs hidden-sm');
                    $('#reportsView').removeClass('hidden-xs hidden-sm');
                    if (clearSelection) {
                        clearSelected();
                    }
                }
            }
            
            // Clear reference to selected record during pagination
            $scope.$watch('gridRef.grid.selection.selectedCount', function (newValue, oldValue) {
                if (newValue !== oldValue && newValue === 0) {
                    $scope.selectedRecord = null;
                }
            });
            
            $scope.resetUploader = function () {
                // Tell uploader to reset
                $scope.fileToUpload = null;
                $scope.$broadcast('ResetSingleFileUploader');
            }
            
            $scope.getTimeCreated = function (record) {
                return record && record.timeCreated && record.timeCreated.$date ? dateIsoToLocale(record.timeCreated.$date) : "";
            };
            
            $scope.getLastUpdated = function (record) {
                return record && record.timeUpdated && record.timeUpdated.$date ? dateIsoToLocale(record.timeUpdated.$date) : "";
            };
            
            function refreshGrid () {
                if ($scope.gridRef) {
                    $scope.gridRef.refreshGrid();
                }
            }
            
            function clearSelected () {
                if ($scope.gridRef) {
                    $scope.gridRef.clearSelection();
                }
                $scope.selectedRecord = null;
            }
        }]);
        cris.bootstrapAngular("idReport", "crisReport");
            // ]]>
    </script>

</jsp:root>
