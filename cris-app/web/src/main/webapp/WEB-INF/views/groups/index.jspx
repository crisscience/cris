<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.1" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/groups" var="urlGroups"/>
    <spring:url value="/users" var="urlUsers"/>
    <spring:url value="/groupusers/" var="urlGroupUsers"/>
    
    <style type="">
        #idGroups h2 {
            margin: 0;
        }
    </style>
    
    <div id="idGroups" data-ng-controller="groupsController">
        <div class="row">
            <div id="groupsView" class="col-sm-6 col-lg-5 col-lg-offset-1">
                <h2>Groups</h2>
                <div class="row">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-primary" ng-click="createNewGroup()">New</button>
                    </div>
                    <div class="col-md-9 text-right">
                        <br class="hidden-xs hidden-sm"/>
                        Show:&amp;nbsp;
                        <span style="display: inline-block;"><cris-radio-button-group name="groupStatus" orientation="horizontal" items="{'Show Enabled': 'true', 'Show Disabled': 'false', 'Show All': ''}" data-ng-model="enabledGroups"><!-- --></cris-radio-button-group></span>
                    </div>
                </div>
                <br />
                <cris-ui-grid column-defs="groupsColumnDefs" url="groupsUrl" grid-ref="groupsGridRef" enable-filtering="true" row-select-callback="groupRowSelectCallback(rowData)"><!----></cris-ui-grid>
            </div>
            <div id="detailsView" class="col-sm-6 col-lg-5 hidden-xs">
                <div class="hidden-sm hidden-md hidden-lg">
                    <button type="button" class="btn btn-default" ng-click="toggleDetailsView(null, true)"><span class="glyphicon glyphicon-chevron-left"></span>&amp;nbsp;Back to Groups List</button>
                </div>
                <h2>Details</h2>
                <div class="text-center">{{currentAction}}</div>
                <div ng-show="selectedGroup || isNewGroup">
                    <table class="table table-striped">
                        <tr>
                            <td style="width: 15%">ID:</td>
                            <td style="width: 85%">{{record.id}}</td>
                        </tr>
                        <tr>
                            <td>Name:</td>
                            <td><input type="text" ng-model="record.name" class="form-control" ng-disabled="isAdminUser()" /></td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <div style="width:100%;" class="text-center">Description:</div>
                                <textarea rows="5" class="form-control" ng-model="record.description" ng-disabled="isAdminUser()"><!----></textarea>
                            </td>
                        </tr>
                        <tr>
                            <td>Dataset Owner:</td>
                            <td>
                                <span style="display: inline-block;"><cris-radio-button-group name="groupOwner" orientation="horizontal" items="{'Group': true, 'User': false, 'None': null}" read-only="{{isAdminUser()}}" data-ng-model="record.isGroupOwner"><!-- --></cris-radio-button-group></span>
                            </td>
                        </tr>
                        <tr>
                            <td>Enabled?</td>
                            <td class="text-center"><input type="checkbox" ng-model="record.enabled" ng-true-value="true" ng-false-value="false" class="checkbox-inline" ng-disabled="isAdminUser()" /></td>
                        </tr>
                        <tr>
                            <td>Time Created:</td>
                            <td>{{getTimeCreated(record)}}</td>
                        </tr>
                        <tr>
                            <td>Last Updated:</td>
                            <td>{{getLastUpdated(record)}}</td>
                        </tr>
                    </table>
                    <div class="pull-right">
                        <button type="button" class="btn btn-primary" ng-click="save()" ng-disabled="isAdminUser() || (!selectedGroup &amp;&amp; !isNewGroup)">Save</button>
                        &amp;nbsp;
                        <button type="button" class="btn btn-primary" ng-click="reset()" ng-disabled="isAdminUser() || (!selectedGroup &amp;&amp; !isNewGroup)">Reset</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row" ng-show="selectedGroup">
            <div class="col-xs-12 col-lg-10 col-lg-offset-1 text-center">
                <h2>Group Membership</h2>
                <div class="row">
                    <div class="col-md-7">
                        <h2>Users in the Group</h2>
                        Group owner:&amp;nbsp;&amp;nbsp;{{selectedGroup.ownerId.firstName + ' ' + selectedGroup.ownerId.lastName}}
                        <cris-ui-grid column-defs="groupUsersColumnDefs" url="groupUsersUrl" enable-row-select="false" grid-ref="groupUsersGridRef" enable-filtering="true"></cris-ui-grid>
                    </div>
                    <div class="col-md-5">
                        <br class="hidden-md hidden-lg"/>
                        <h2>Other Users</h2>
                        <cris-ui-grid column-defs="usersColumnDefs" url="usersUrl" enable-row-select="false" grid-ref="usersGridRef" enable-filtering="true"><!----></cris-ui-grid>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        // <![CDATA[
        angular.module('crisGroups', ["angular-dojo"]).controller('groupsController', ['$scope', '$http', '$uibModal', function ($scope, $http, $uibModal) {
            $scope.enabledGroups = "true"; // by default show enabled groups
            
            // groups grid properties
            $scope.groupsUrl = "${urlGroups}" + '/?' + 'enabled=true&sort(+name)';
            $scope.groupsColumnDefs = [
                {field: 'id', name: 'id', displayName: 'ID', width: 60, visible: false},
                {field: 'name', name: 'name', displayName: 'Name', minWidth: 120}
            ];
            
             // group-users grid properties
            $scope.groupUsersUrl = "${urlUsers}" + '/?' + 'enabled=true&groupId=0&sort(+lastName)';
            $scope.groupUsersColumnDefs = [
                {field: 'id', name: 'id', displayName: 'ID', width: 60, visible: false},
                {field: 'lastName', name: 'Last Name', displayName: 'Last Name', minWidth: 100},
                {field: 'firstName', name: 'First Name', displayName: 'First Name', minWidth: 100},
                {field: 'username', name: 'User Name', displayName: 'User Name', minWidth: 100},
                {field: '_makeGroupUser', name: '_makeGroupUser', displayName: '', minWidth: 120, enableFiltering: false, enableSorting: false, cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"><a ng-hide="row.entity.username===grid.appScope.gridRef.selectedGroup.ownerId.username" href="" ng-click="grid.appScope.gridRef.makeUserGroupOwner(row.entity.id)">Make Group Owner</a><span ng-show="row.entity.username===grid.appScope.gridRef.selectedGroup.ownerId.username">Group Owner</span></div>'},
                {field: '_removeUser', name: '_removeUser', displayName: 'Remove', width: 65, enableFiltering: false, enableSorting: false, cellTemplate: '<div class="ui-grid-cell-contents text-center" title="TOOLTIP"><a ng-click="grid.appScope.gridRef.removeUser(row.entity.id)"><span class="glyphicon glyphicon-remove"></span></a></div>'}
            ];
            
            // all-users grid properties
            $scope.usersUrl = "${urlUsers}" + '/?' + 'enabled=true&sort(+lastName)';
            $scope.usersColumnDefs = [
                {field: 'id', name: 'id', displayName: 'ID', width: 60, visible: false},
                {field: 'lastName', name: 'Last Name', displayName: 'Last Name', minWidth: 100},
                {field: 'firstName', name: 'First Name', displayName: 'First Name', minWidth: 100},
                {field: 'username', name: 'User Name', displayName: 'User Name', minWidth: 100},
                {field: '_addUser', name: '_addUser', displayName: 'Add', width: 60, enableFiltering: false, enableSorting: false, cellTemplate: '<div class="ui-grid-cell-contents text-center" title="TOOLTIP"><a ng-click="grid.appScope.gridRef.addUser(row.entity.id)"><span class="glyphicon glyphicon-plus"></span></a></div>'}
            ];
            
            $scope.currentAction = "No group selected";
            
            $scope.record = {};
            $scope.$watch('enabledGroups', function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    if (newValue === '') { // all groups
                        $scope.groupsUrl = "${urlGroups}" + '/?sort(+name)';
                    } else if (newValue === 'true') { // enabled groups
                        $scope.groupsUrl = "${urlGroups}" + '/?enabled=true&sort(+name)';
                    } else { // disabled groups
                        $scope.groupsUrl = "${urlGroups}" + '/?enabled=false&sort(+name)';
                    }
                    clearDetails();
                    refreshGrid();
                }
                $scope.isNewGroup = false;
            });
            
            // After groups grid init, append functions to it's groupApi for access within the group cell template
            $scope.$watch('groupUsersGridRef', function (newValue, oldValue) {
                if (newValue && !newValue.makeUserGroupOwner) {
                    newValue.makeUserGroupOwner = function (userId) {
                        
                        var _data = angular.copy($scope.selectedGroup);
                        _data.ownerId = {$ref: cris.baseUrl + "users/" + userId};
                        var progressModal = showProgressModal({uibModal: $uibModal});
                        $http({
                            url: "${urlGroups}/" + $scope.selectedGroup.id,
                            method: "PUT",
                            data: _data
                        }).then(function (success) {
                            progressModal.close();
                            refreshGrid(true);
                        }, function (error) {
                            progressModal.close();
                            showMessageModal({uibModal: $uibModal, message: "Failed to change owner. " + error.data});
                        })
                    };
                }
                
                if (newValue && !newValue.removeUser) {
                    newValue.removeUser = function (userId) {
                        var progressModal = showProgressModal({uibModal: $uibModal});
                        $http({
                            url: "${urlGroupUsers}?userId=" + userId + "&groupId=" + $scope.selectedGroup.id,
                            method: "GET"
                        }).then(function (success) {
                            var groupUserId = success.data.id;
                            $http({
                                url: "${urlGroupUsers}"+ groupUserId,
                                method: "DELETE"
                            }).then(function (success) {
                                var response = success.data;
                                if (response && response.message) {
                                    progressModal.close();
                                    showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + response.message});
                                    return;
                                } else {
                                    $scope.groupUsersGridRef.refreshGrid();
                                    $scope.usersGridRef.refreshGrid();
                                    progressModal.close();
                                }
                            }, function (error) {
                                progressModal.close();
                                var message;
                                if (error.data && error.data.responseText) {
                                    message = JSON.parse(error.data.responseText).exception.message;
                                } else {
                                    message = error.data.message;
                                }
                                showMessageModal({uibModal: $uibModal, message: "Failed: " + message});
                            });
                        }, function (error) {
                            
                        });
                    };
                }
            });
            
            // After group users grid init, append functions to it's groupApi for access within the group cell template
            $scope.$watch('usersGridRef', function (newValue, oldValue) {
                if (newValue && !newValue.addUser) {
                    newValue.addUser = function (userId) {
                        var groupId = $scope.selectedGroup.id;
                        var progressModal = showProgressModal({uibModal: $uibModal});
                        $http({
                            url: "${urlGroupUsers}",
                            method: "POST",
                            data: {
                                userId: {$ref: cris.baseUrl + "users/" + userId},
                                groupId: {$ref: cris.baseUrl + "groups/" + groupId}
                            }
                        }).then(function (success) {
                            var response = success.data;
                            if (response.error) {
                                progressModal.close();
                                showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + response.error.message + " " + response.error.status});
                                return;
                            } else {
                                $scope.groupUsersGridRef.refreshGrid();
                                $scope.usersGridRef.refreshGrid();
                                progressModal.close();
                            }
                        }, function (error) {
                            progressModal.close();
                            var message;
                            if (error.data && error.data.responseText) {
                                message = dojo.fromJson(error.data.responseText).exception.message;
                            } else {
                                message = error.data.message;
                            }
                            showMessageModal({uibModal: $uibModal, message: "Error: " + message});
                        });
                    };
                }
            });
            
            $scope.save = function () {
                var data;
                var method;
                if ($scope.isNewGroup) {
                    if (!$scope.record.name) {
                        showMessageModal({uibModal: $uibModal, message: "You must provide a name for the group"});
                        return;
                    }
                    data = $scope.record;
                    method = "POST";
                } else {
                    if ($scope.selectedGroup) {
                        if (!isModified()) {
                            showMessageModal({uibModal: $uibModal, message: "No change is made"});
                            return;
                        }
                        data = $scope.selectedGroup;
                        data.name = $scope.record.name;
                        data.description = $scope.record.description;
                        data.enabled = $scope.record.enabled;
                        data.isGroupOwner = $scope.record.isGroupOwner;
                        method = "PUT";
                    } else {
                        showMessageModal({uibModal: $uibModal, message: "Please select a group"});
                        return;
                    }
                }
                $scope.isNewGroup = false;
                
                var progressModal = showProgressModal({uibModal: $uibModal});
                $http({
                    url: "${urlGroups}" + (method === "PUT" ? "/" + data.id : ""),
                    method: method,
                    data: data
                }).then(function (success) {
                    var response = success.data;
                    if (response.hasError) {
                        showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + response.message + " " + response.status});
                        progressModal.close();
                        return;
                    }
                    refreshGrid(true);
                    progressModal.close();
                }, function (error) {
                    var message;
                    if (error.data && error.data.text) {
                        message = JSON.parse(error.data.text).message;
                    } else {
                        message = error.data;
                    }
                    progressModal.close();
                    showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + message});
                });
            };
            
            $scope.groupRowSelectCallback = function (rowData) { // on group selected
                $scope.isNewGroup = false;
                $scope.record = angular.copy(rowData);
                $scope.selectedGroup = rowData;
                $scope.toggleDetailsView(true);
                
                // update group users grid
                $scope.groupUsersUrl = "${urlUsers}" + '/?' + 'enabled=true&groupId=' + rowData.id + '&sort(+lastName)';
                $scope.groupUsersGridRef.refreshGrid();
                $scope.groupUsersGridRef.selectedGroup = rowData; // We need access to selected group data within the group users grid
                
                // update url for other users (not in selected group)
                $scope.usersUrl = "${urlUsers}" + '/?' + 'enabled=true&groupId=-' + rowData.id + '&sort(+lastName)';
                $scope.usersGridRef.refreshGrid();
                $scope.currentAction = "Edit selected group";
            };
                
            $scope.createNewGroup = function () {
                $scope.isNewGroup = true;
                clearDetails();
                $scope.record = {};
                $scope.toggleDetailsView(true);
                $scope.currentAction = "Create a new group";
            };
            
            $scope.reset = function () {
                if ($scope.selectedGroup) {
                    $scope.record = angular.copy($scope.selectedGroup);
                } else {
                    $scope.record = {};
                }
            };
            
            // On smaller screens toggle between projects view and details view
            $scope.toggleDetailsView = function (doShow, clearSelection) {
                if (doShow) {
                    $('#detailsView').removeClass('hidden-xs');
                    $('#groupsView').addClass('hidden-xs');
                } else {
                    $('#detailsView').addClass('hidden-xs');
                    $('#groupsView').removeClass('hidden-xs');
                    if (clearSelection) {
                        clearSelected();
                    }
                }
            };
            
            $scope.getTimeCreated = function (record) {
                return record && record.timeCreated && record.timeCreated.$date ? dateIsoToLocale(record.timeCreated.$date) : "";
            };
            
            $scope.getLastUpdated = function (record) {
                return record && record.timeUpdated && record.timeUpdated.$date ? dateIsoToLocale(record.timeUpdated.$date) : "";
            };
            
            $scope.isAdminUser = function () {
                var result = false;
                if ($scope.selectedGroup) { // only enable some buttons for administrators
                    result = ($scope.selectedGroup.name === 'Admin Group');
                }
                return result;
            };
            
            function refreshGrid (restoreSelection) {
                if ($scope.groupsGridRef) {
                    if (restoreSelection && $scope.selectedGroup) {
                        $scope.groupsGridRef.refreshGrid(function () {
                            $scope.groupsGridRef.selectRow($scope.selectedGroup.id, "id");
                        });
                    } else {
                        $scope.groupsGridRef.refreshGrid();
                    }
                }
            }
            
            function isModified () {
                var modified = false;
                if ($scope.record.name !== $scope.selectedGroup.name) {
                    modified = true;
                }
                if ($scope.record.description !== $scope.selectedGroup.description) {
                    modified = true;
                }
                if ($scope.record.enabled !== $scope.selectedGroup.enabled) { // record boolean is string
                    modified = true;
                }
                if ($scope.record.isGroupOwner !== $scope.selectedGroup.isGroupOwner) { // record boolean is string
                    modified = true;
                }
                return modified;
            } 
            
            function clearSelected () {
                if ($scope.groupsGridRef) {
                    $scope.groupsGridRef.clearSelection();
                }
                $scope.selectedGroup = null;
                
                // reset group users grid
                if ($scope.groupUsersGridRef) {
                    $scope.groupUsersUrl = "${urlUsers}" + '/?' + 'enabled=true&groupId=0&sort(+lastName)';
                    $scope.groupUsersGridRef.refreshGrid();
                    $scope.groupUsersGridRef.selectedGroup = {};
                }
                
                // reset other group users grid
                if ($scope.usersGridRef) {
                    $scope.usersUrl = "${urlUsers}" + '/?' + 'enabled=true&sort(+lastName)';
                    $scope.usersGridRef.refreshGrid();
                }
                $scope.currentAction = "No group selected";
            }
            
            function clearDetails () {
                clearSelected();
                $scope.record = {};
            }
        }]);
        cris.bootstrapAngular("idGroups", "crisGroups");
        // ]]>
    </script>

</jsp:root>
