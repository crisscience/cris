<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<jsp:root xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:spring="http://www.springframework.org/tags"
          version="2.0">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/storages/" var="urlStorages"/>
    <spring:url value="/storagefiles" var="urlFileStorages"/>

    <script type="text/javascript">
        cris.require("dojox/grid/EnhancedGrid");
        cris.require("dojox/grid/enhanced/plugins/Selector");
        cris.require("dojox/grid/enhanced/plugins/Pagination");
        cris.require("dojox/data/JsonRestStore");
        cris.require("dijit/form/RadioButton");
        cris.require("dijit/form/Button");
        cris.require("dijit/form/ComboBox");
        cris.require("dijit/form/TextBox");
        cris.require("dijit/form/SimpleTextarea");
        cris.require("dijit/form/FilteringSelect");
        cris.require("dojox/grid/enhanced/plugins/Filter");
        cris.require("dijit/layout/ContentPane");
        cris.require("dijit/layout/TabContainer");

        cris.ready(function() {
            var storeStorages = createJsonRestStore("${urlStorages}");
            var storeFileStorages = createJsonRestStore("${urlFileStorages}");
            var gridStorages;
            var gridFileStorages;
            var creatingNewStorage ;

            function updateStorage(item) {
                dojo.byId("storageId").innerHTML = storeStorages.getValue(item, "id") || "";
                dojo.byId("storageName").value = storeStorages.getValue(item, "name") || "";
                dojo.byId("storageType").value = storeStorages.getValue(item, "type") || "";
                dojo.byId("storageLocation").value = storeStorages.getValue(item, "location") || "";
                dojo.byId("storageCapacity").value = storeStorages.getValue(item, "capacity") || "";
                dojo.byId("storageTimeCreated").innerHTML = stringDateTime(storeStorages.getValue(item, "timeCreated")) || "";
                dojo.byId("storageLastUpdated").innerHTML = stringDateTime(storeStorages.getValue(item, "timeUpdated")) || "";
            }

            function updateStorageItem(item) {
                storeStorages.setValue(item, "name", dojo.byId("storageName").value);
                storeStorages.setValue(item, "type", dojo.byId("storageType").value);
                storeStorages.setValue(item, "location", dojo.byId("storageLocation").value);
                storeStorages.setValue(item, "capacity", dojo.byId("storageCapacity").value);

            }

            creatingNewStorage = false ;
            var storagesLayout = [{
                    cells: [
                        { field: 'id', name: 'ID', datatype: "number", width: '50px' },
                        { field: 'name', name: 'Name', width: 'auto' },
                        { field: 'capacity', name: 'Capacity', datatype: "number", width: 'auto' }
                    ] }];

            var fileStoragesLayout= [{cells: [
                        { field: 'id', name: 'ID', datatype: "number", width: '50px' },
                        { field: 'fileName', name: 'File Name1', width: 'auto' },
                        { field: 'location', name: 'Physical Location', datatype: "number", width: 'auto' }
                    ]}];
            var asc = true;
            var args = {
                rowsPerPage: 10,
                pageSizes: []
            };

            args.sortFields = [{attribute: "name", descending: !asc}];
            gridStorages = createGrid(storeStorages, storagesLayout, "gridDiv", args);
            dojo.connect(gridStorages, "onSelected", function(index) {
                creatingNewStorage = false;
                var item = gridStorages.getItem(index);
                updateStorage(item);
                gridFileStorages.setQuery({storageId: item.id});

            });

            args.sortFields = [{attribute: "location", descending: !asc}];
            gridFileStorages = createGrid(storeFileStorages, fileStoragesLayout, "fileStroagesId", args);

            var buttonNewStorage = dijit.byId("buttonNew");
            dojo.connect(buttonNewStorage, "onClick", function(evt){
                creatingNewStorage = true;
                updateStorage({});

            });

            dojo.connect(dijit.byId("storageButtonSave"), "onClick", function(evt) {
                var item;
                if (creatingNewStorage) {
                    var name = dojo.byId("storageName").value;
                    if (!name) {
                        showMessage("You must specify a name for the storage");
                        return;
                    }

                    var yes = showConfirm("Do you want to add a new storage: " + name + "?");
                    if (!yes) {
                        return;
                    }

                    item = storeStorages.newItem();
                } else {
                    if (gridStorages.selection.getSelectedCount("row") >= 1) {
                        item = gridStorages.selection.getSelected("row")[0];
                    } else {
                        showMessage("Please select a storage");
                        return;
                    }
                    var yes = showConfirm("Do you want to save the changes?");
                    if (!yes) {
                        return;
                    }
                }

                var pd = createProgressDialog();
                updateStorageItem(item);
                storeStorages.save({
                    onComplete: function() {
                        pd.hide();
                    },
                    onError: function(error) {
                        pd.setContent("Failed to save changes. " + error);
                    }
                });
            });

            dojo.connect(dijit.byId("storageButtonReset"), "onClick", function(evt) {
                var item = gridStorages.selection.getSelected("row")[0];
                if (!item || creatingNewStorage) {
                    updateStorage({});
                } else {
                    updateStorage(item);
                }
            });
        });
    </script>

    <br style="clear: both"/>

    <div style="width: 100%; height: 600px">
        <div data-dojo-type="dijit.layout.TabContainer" style="width: 100%; height: 100%;">
            <!-- Explore tab -->
            <div data-dojo-type="dijit.layout.ContentPane" data-dojo-props='title : "Explore", selected : "true"'>

                <div class="floatLeft half">
                    <h2>Storages</h2>

                    <input id="buttonNew" type="button" data-dojo-type="dijit.form.Button" data-dojo-props='label : "New"'/>
                    <br/>
                    <div id="gridDiv" style="width: 99%">
                        <!-- buggy firefox -->
                    </div>
                </div>

                <div class="floatRight half">
                    <div id="tabContainer" data-dojo-type="dijit.layout.TabContainer" style="width: 100%" doLayout="false">
                        <div id="tabDetail" data-dojo-type="dijit.layout.ContentPane" data-dojo-props='title : "Details", selected : "true"' style="border: 0px; padding: 0px">
                            <div>
                                <table style="width: 100%">
                                    <tr>
                                        <td style="width: 30%">ID:</td><td id="storageId" style="width: 70%"><!-- --></td>
                                    </tr>
                                    <tr>
                                        <td>Name:</td>
                                        <td class="tdTextBox"><input id="storageName" name="name" data-dojo-type="dijit.form.TextBox"/></td>
                                    </tr>
                                    <tr>
                                        <td>Type:</td>
                                        <td class="tdTextBox">
                                            <select id="storageType" name="type" data-dojo-type="dijit.form.ComboBox">
                                                <option>file</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Location:</td>
                                        <td class="tdTextBox"><input id="storageLocation" name="location" data-dojo-type="dijit.form.TextBox"/></td>
                                    </tr>
                                    <tr>
                                        <td>Capacity:</td>
                                        <td class="tdTextBox"><input id="storageCapacity" name="Capacity" data-dojo-type="dijit.form.TextBox"/></td>
                                    </tr>
                                    <tr>
                                        <td>Time Created:</td><td id="storageTimeCreated"><!-- --></td>
                                    </tr>
                                    <tr>
                                        <td>Last Updated:</td><td id="storageLastUpdated"><!-- --></td>
                                    </tr>
                                </table>
                                <div style="float: right">
                                    <input id="storageButtonSave" type="submit" data-dojo-type="dijit.form.Button" data-dojo-props='label : "Save"'/>
                                    <input id="storageButtonReset" type="reset" data-dojo-type="dijit.form.Button" data-dojo-props='label : "Reset"'/>
                                </div>
                            </div>
                        </div>
                        <div id="tabManagedFiles" data-dojo-type="dijit.layout.ContentPane" data-dojo-props='title : "Managed Files", selected : "true"' style="border: 0px; padding: 0px">
                            <div id="fileStroagesId"><!-- fix ff problem --></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Transfer tab -->
            <div data-dojo-type="dijit.layout.ContentPane" title="Transfer">
                <style type="text/css" media="screen" scoped="">
                    .browseButton {
                        width: 120px;
                        height: 30px;
                        margin:10px 0 2px 0;
                        display: block;
                    }

                    .dojoxUploaderFileListHeader th{
                        color: #666666;
                    }

                    .dojoxUploaderFileListTable {
                        border: 0px;
                        margin: 0px;
                        padding: 0px;
                    }
                </style>

                <script type="text/javascript">
                    cris.require("dijit/form/Button");
                    cris.require("dijit/form/FilteringSelect");
                    cris.require("dijit/form/Form");
                    cris.require("dojox/form/Uploader");
                    cris.require("dojox/form/uploader/FileList");
                    cris.require("dojox/form/uploader/plugins/IFrame");
                    cris.require("dojox/data/JsonRestStore");

                    cris.ready(function(){
                        <spring:url value="/storagefiles" var="url"/>
                        <spring:url value="/ifupload" var="urlUpload"/>

                        storeFileStorages = createJsonRestStore("${url}");

                        var path="sz";
                        var gridFileStorages ;
                        var options;
                        var loc;
                        var data2;

                        // <![CDATA[
                        function listDirs(){
                        }

                        function initTransfer(){
                            var destId = dijit.byId("dest_storage_id").attr('value');
                            var sourceId = dijit.byId("source_storage_id").attr('value');
                            var item = gridFileStorages.selection.getSelected("row")[0];

                            if (!item) {
                                showMessage("Please select a file");
                            } else if (sourceId == destId){
                                showMessage("Source and destination cannot be the same");
                            } else {
                                var yes = showConfirm("Do you want to move the file: " + item.location + " ?");
                                if (yes) {
                                    var pd = createProgressDialog();
                                    var queryString = "destId=" + destId + "&fileId=" + item.id;
                                    dojo.xhrGet({
                                        url: "initiateTransfer?"  + queryString,
                                        handleAs: "json",
                                        load: function(data) {
                                            if (data.succeeded) {
                                                pd.setContent("File transferred.");
                                            } else {
                                                pd.setContent("Error:\n" + data.message);
                                            }
                                        }
                                    });
                                }
                            }
                        }

                        dojo.connect(dijit.byId("buttonTransfer"), "onClick", initTransfer);

                        dojo.connect(dijit.byId("uploader"), "onChange", function(evt) {
                            dojo.byId("id_message").innerHTML = "";
                        });

                        dojo.connect(dijit.byId("id_button_upload"), "onClick", function(evt){
                            var request = {};

                            dojo.io.iframe.send({
                                url: "${urlUpload}",
                                method: "POST",
                                form: "id_form_file_upload",
                                content: request,
                                handleAs: "json",
                                load: function(response) {
                                    dojo.byId("id_message").innerHTML = "File(s) saved successfully.";
                                },
                                error: function(err, ioArgs) {
                                    dojo.byId("id_message").innerHTML = "Failed to save file(s).";
                                }
                            });
                        });

                        var fileStoragesLayout = [{cells: [
                                { field: 'id', name: 'ID', datatype: "number", width: '50px' },
                                { field: 'fileName', name: 'File Name', width: 'auto' },
                                { field: 'location', name: 'Physical Location', datatype: "number", width: 'auto' }
                            ]}];
                        var asc = true;
                        var args = {
                            rowsPerPage: 10,
                            pageSizes: []
                        };
                        args.sortFields = [{attribute: "location", descending: !asc}];
                        gridFileStorages = createGrid(storeFileStorages, fileStoragesLayout, "directoriesDiv", args);

                        var sourceStorage = dijit.byId("source_storage_id");
                        dojo.connect(sourceStorage, "onChange", function(value) {
                            gridFileStorages.setQuery({storageId: value});
                        });

                    });

                // ]]>
                </script>

                <div class="floatLeft half">

                    <form data-dojo-type="dijit.form.Form">
                        <fieldset style="width: 95%;">
                            <legend>Move Files between Storages</legend>
                            <p>Source Storage:</p>
                            <select id="source_storage_id" data-dojo-type="dijit.form.FilteringSelect">
                                <c:forEach items="${storages}" var="item">
                                    <option value="${item.id}">${item.name}</option>
                                </c:forEach>
                            </select>

                            <p>Destination Storage:</p>
                            <select id="dest_storage_id" data-dojo-type="dijit.form.FilteringSelect">
                                <c:forEach items="${storages}" var="item">
                                    <option value="${item.id}">${item.name}</option>
                                </c:forEach>
                            </select>

                            <p><!-- --></p>

                            <input id="buttonTransfer" type="button" data-dojo-type="dijit.form.Button" data-dojo-props="label: 'Move'"/>
                        </fieldset>

                    </form>
                    <br/>

                    <hr/>

                    <table style="width: 100%;">
                        <tr>
                            <td>
                                <form id="id_form_file_upload" method="POST" enctype="multipart/form-data" data-dojo-type="dijit.form.Form">
                                    <fieldset style="width: 95%;">
                                        <legend>Import Files into Storage</legend>
                                        <input class="browseButton" id="uploader" name="uploadedfile" type="file" data-dojo-type="dojox.form.Uploader" data-dojo-props='label : "Browse for File(s)", multiple : true'/>
                                        <div id="files" data-dojo-type="dojox.form.uploader.FileList" data-dojo-props='uploaderId: "uploader"'><!-- --></div>

                                        <p><!-- --></p>
                                        <div class="errors" id="id_message"><!-- --></div>
                                        <p><!-- --></p>

                                        <input id="id_button_upload" type="button" data-dojo-type="dijit.form.Button" data-dojo-props='label: "Import"' style="float: left;"/>
                                    </fieldset>
                                </form>
                            </td>
                        </tr>
                    </table>

                </div>

                <div class="floatRight half">
                    <div id="directoriesDiv">
                        <!-- ff problem  -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</jsp:root>
