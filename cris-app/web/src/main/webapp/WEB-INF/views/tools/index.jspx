<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<jsp:root version="2.1" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/tools" var="url"/>
    <spring:url value="/tools/parameters" var="urlParameters"/>

    <script type="text/javascript">
        // <![CDATA[
        cris.require('dijit/form/FilteringSelect');
        cris.require('dijit/form/Form');
        cris.require("dijit/form/Button");
        cris.require("dijit/form/RadioButton");
        cris.require("dijit/form/DateTextBox");
        cris.require("dijit/form/TextBox");
        cris.require("dijit/form/Textarea");
        cris.require("dojox/data/JsonRestStore");

        function updateToolDetail(item) {
            dojo.byId("id").innerHTML = item.id || "";
            dijit.byId("name").setValue(item.name || "");
            dijit.byId("idDescription").setValue(item.description || "");
            dijit.byId("content").setValue(item.content || "");
            dojo.byId("timeCreated").innerHTML = item.timeCreated && item.timeCreated.$date ? dateIsoToLocale(item.timeCreated.$date) : "";
            dojo.byId("lastUpdated").innerHTML = item.timeUpdated && item.timeUpdated.$date ? dateIsoToLocale(item.timeUpdated.$date) : "";
        }

        function updateTool(item) {
            store.setValue(item, "name", dijit.byId("name").getValue());
            store.setValue(item, "description", dijit.byId("idDescription").getValue());
            store.setValue(item, "content", dijit.byId("content").getValue());
        }

        function isModified(item) {
            var isModified = false;

            var name = dijit.byId("name").getValue();
            var description = dijit.byId("idDescription").getValue();
            var content = dijit.byId("content").getValue();

            if ((item.name !== name)) {
                isModified = true;
            } else if (item.description !== description) {
                isModified = true;
            } else if (item.commandLIne !== content) {
                isModified = true;
            }

            return isModified;
        }

        function saveItem(item) {
            var modified = isModified(item);
            if (modified) {
                updateTool(item);
                var pd = createProgressDialog();
                store.save({
                    onComplete: function(data) {
                        pd.hide();
                        if (data.error) {
                            showMessage(data.error);
                        } else if (data.message) {
                            showMessage(data.message);
                        }
                        updateToolDetail(data[0].content);
                    },
                    onError: function(error) {
                        pd.hide();
                        showMessage("Failed to save changes. " + error.responseText);
                    }
                });
            } else {
                showMessage("No change is made");
                return;
            }
        }

        function deleteItem(item) {
            var pd = createProgressDialog();
            store.deleteItem(item);
            store.save({
                onComplete: function(data) {
                    var xhr = data[0].deferred.ioArgs.xhr.response;
                    if(xhr ==""){
                        grid.setQuery({});
                        pd.hide();
                    }else{
                        var object = JSON.parse(xhr);
                        if(object.message){
                            updateHtml(item);
                            grid.setQuery({});
                            pd.setContent("Failed to save changes. " + object.message);
                        }
                    }
                },
                onError: function(error) {
                    pd.setContent("Failed to delete tool. " + error);
                }
            });
        }

        creatingNew = false;

        cris.ready(function() {
            store = createJsonRestStore("${url}");

            var editor = new dijit.Editor({height: "5"}, "idDescription");
            editor.startup();

            var layout = [{cells: [
                        {field: 'id', name: 'ID', datatype: "number", width: '50px'},
                        {field: 'name', name: 'name', width: 'auto'},
                        {field: 'timeUpdated', name: 'Time Updated', width: '100px',
                            dataTypeArgs: {
                                datePattern: "yyyy-M-d"
                            },
                            get: function(row, item) {
                                if (!item) {
                                    return "Loading...";
                                }
                                return item.timeUpdated ? dateIsoToLocale(item.timeUpdated.$date) : "";
                            }}
                    ]}];

            var asc = true;
            var args = {
                sortFields: [{attribute: "name", descending: !asc}]
            };

            grid = createGrid(store, layout, "idGrid", args);
            grid.setSortIndex(1, asc);
            if ("${filter}" !== "") {
                grid.setQuery({filter: "${filter}"});
            }

            dojo.connect(grid, "onSelected", function(index) {
                dojo.byId("detailPrompt").innerHTML = "Edit an existing tool";
                creatingNew = false;
                var item = grid.getItem(index);
                updateToolDetail(item);
            });

            var buttonNew = dijit.byId("idNewButton");
            dojo.connect(buttonNew, "onClick", function(evt) {
                dojo.byId("detailPrompt").innerHTML = "Create a new tool";
                creatingNew = true;
                grid.selection.deselectAll();
                updateToolDetail({});
            });

            var buttonDelete = dijit.byId("idDeleteButton");
            dojo.connect(buttonDelete, "onClick", function(evt) {
                var item = grid.selection.getSelected("row")[0];
                if (!item) {
                    showMessage("Please select a tool");
                    return;
                }

                var yes = showConfirm("Do you want to delete tool " + item.name + "?");
                if (!yes) {
                    return;
                }

                deleteItem(item);

                item = grid.selection.getSelected("row")[0];
                if (item) {
                    updateToolDetail(item);
                } else {
                    updateToolDetail({});
                }
            });

            var buttonSave = dijit.byId("idSaveButton");
            dojo.connect(buttonSave, "onClick", function(evt) {
                var item;
                if (creatingNew) {
                    item = store.newItem();
                } else {
                    if (grid.selection.getSelectedCount("row") >= 1) {
                        item = grid.selection.getSelected("row")[0];
                    } else {
                        showMessage("Please select a tool");
                        return;
                    }
                }

                saveItem(item);
            });

            var buttonRun = dijit.byId("idRunButton");
            dojo.connect(buttonRun, "onClick", function(evt) {
                if (grid.selection.getSelectedCount("row") >= 1) {
                    var item = grid.selection.getSelected("row")[0];
                    window.location.href = "${url}/run/" + item.id;
                } else {
                    showMessage("Please select a tool");
                }
            });

        });

        angular.module('crisTool', ['angular-dojo']);
        angular.module('crisTool').controller("ToolController", ["$scope", function($scope) {

        }]);

        cris.bootstrapAngular("idTool", "crisTool");
        // ]]>
    </script>

    <div id="idTool" data-ng-controller="ToolController">
        <div style="width: 49%; float: left">
            <h2>Tools</h2>

            <input id="idNewButton" data-dojo-type="dijit/form/Button" data-dojo-props="label: 'New'"/>
            <input id="idDeleteButton" data-dojo-type="dijit/form/Button" data-dojo-props="label: 'Delete'"/>
            <br/>
            <div id="idGrid"><!-- fix ff problem --></div>
        </div>

        <div style="width: 50%; float: right">
            <form id="idForm" data-dojo-type="dijit/form/Form">
                <h2>Details</h2>
                <div id="detailPrompt" style="text-align: center">No tool selected</div>
                <div>
                    <table style="width: 100%">
                        <tr>
                            <td style="width: 30%">ID:</td><td id="id" style="width: 70%"><!-- fix ff problem --></td>
                        </tr>
                        <tr>
                            <td>Name:</td><td class="tdTextBox"><input id="name" data-dojo-type="dijit.form.TextBox"/></td>
                        </tr>
                        <tr>
                            <td style="text-align: center" colspan="2">Description</td>
                        </tr>
                        <tr>
                            <td class="tdTextArea" colspan="2"><div id="idDescription"><!-- --></div></td>
                        </tr>
                        <tr>
                            <td style="text-align: center" colspan="2">HTML Code</td>
                        </tr>
                        <tr>
                            <td class="tdTextArea" colspan="2"><input id="content" data-dojo-type="dijit/form/SimpleTextarea" data-dojo-props="rows: '10'"/></td>
                        </tr>
                        <tr>
                            <td>Time Created:</td><td id="timeCreated"><!-- fix ff problem --></td>
                        </tr>
                        <tr>
                            <td>Last Updated:</td><td id="lastUpdated"><!-- fix ff problem --></td>
                        </tr>
                    </table>
                </div>

                <div style="float: right">
                    <input id="idSaveButton" type="button" data-dojo-type="dijit/form/Button" data-dojo-props='label : "Save"'/>
                    <input id="idRunButton" type="button" data-dojo-type="dijit/form/Button" data-dojo-props='label : "Run"'/>
                </div>
            </form>
        </div>

        <br style="clear: both"/>
    </div>
</jsp:root>
