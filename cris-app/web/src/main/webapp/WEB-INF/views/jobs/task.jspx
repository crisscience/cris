<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<jsp:root version="2.1" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/" var="urlBase"/>
    <spring:url value="/download/" var="urlDownload"/>
    <spring:url value="/rest/objectus/" var="urlRestObjectus"/>
    <spring:url value="/rest/objectus/validate/" var="urlRestObjectusValidate"/>
    <spring:url value="/templates/render/" var="urlTemplatesRender"/>
    <spring:url value="/jobs/task" var="urlJobsTask"/>

    <c:set value="${jsRoot}/dm/dataset.js" var="url" />
    <script src="${url}" type="text/javascript"><!-- required for FF3 and Opera --></script>

    <c:set value="${jsRoot}/dm/JobTaskController.js" var="urlJobTaskController" />
    <script type="text/javascript" src="${urlJobTaskController}"><!-- --></script>

    <script type="text/javascript">
        // <![CDATA[
        cris.require([
            "dojo/behavior",
            "dojo/ready",
            "dojo/NodeList-traverse",
            "dijit/registry",
            "dijit/form/Button",
            "dijit/form/ComboBox",
            "dijit/form/FilteringSelect",
            "dijit/form/Form",
            "dijit/form/Select",
            "dijit/form/SimpleTextarea",
            "dijit/form/ValidationTextBox",
            "dojox/form/Uploader",
            "dojox/form/Manager",
            "dojox/xml/parser"
        ]);

        cris.ready(function () {
            var temp = function(){/*${jsonIn}*/}.toString();
            var start = temp.indexOf("/*") + 2;
            var end = temp.lastIndexOf("*/");
	        var jsonIn = temp.slice(start, end);
	        if (!jsonIn) {
	        	jsonIn = "{}";
	        }

	        cris.job = {};
	        cris.job.task = {};
	        cris.job.task.app = {

	            urlBase: "${urlBase}",
	            urlDownload: "${urlDownload}",
	            urlRestObjectus: "${urlRestObjectus}",
	            urlRestObjectusValidate: "${urlRestObjectusValidate}",
	            urlTemplatesRender: "${urlTemplatesRender}",

	            isAutoGenerated: function () {
	                var nodeAutoGenerated = dojo.byId("idAutoGenerated");
	                var autoGenerated = false;
	                if (nodeAutoGenerated && nodeAutoGenerated.value === "true") {
	                    autoGenerated = true;
	                }
	                return autoGenerated;
	            },

	            isIgnoreFormData: function () {
	                var nodeIgnoreFormData = dojo.byId("idIgnoreFormData");
	                var ignoreFormData = false;
	                if (nodeIgnoreFormData && nodeIgnoreFormData.value === "true") {
	                    ignoreFormData = true;
	                }
	                return ignoreFormData;
	            },

	            setJsonToServer: function(inputFieldId) {
	                if (cris.job.task.app.jsonToServer) {
	                    dojo.byId(inputFieldId).value = dojo.toJson(cris.job.task.app.jsonToServer);
	                }
	            },

	            jsonIn: dojo.fromJson(jsonIn),

	            // workflow managed
	            // user defined form
	            jsonToServer: {
	                jobId: "${job.id}",
	                taskId: "${task.id}"
	            },

	            // cris managed
	            // auto-generated form
	            jobId: "${job.id}",
	            taskId: "${task.id}",

	            // set form field value

	            // ajax form post
	            save: function () {
	                if (this.isAutoGenerated()) {
	                    // managed by cris
	                    var scope = getAngularElementScope("idJobTaskController");
	                    scope.saveDocument();
	                } else {
	                    // managed by workflow
	                    if (cris.workflow && cris.workflow.app && cris.workflow.app.save) {
	                        // wokflow provide its own save() function
	                        cris.workflow.app.save();
	                    } else {
	                        // workflow doesn't provide a save() function
	                        if (this.isIgnoreFormData()) {
	                            // do nothing
	                        } else {
	                            //TODO: do an ajax form submission
	                        }
	                    }
	                }
	            },

	            // normal form post
	            submit: function () {
	                var form;

	                if (this.isAutoGenerated()) {
	                    // managed by cris
	                    var scope = getAngularElementScope("idJobTaskController");
                            dojo.setStyle(dijit.byId('buttonSubmit').domNode, 'visibility', 'hidden'); // hide button to prevent double submit
	                    scope.saveDocument(function () {
	                        //cris.job.task.app.setJsonToServer("idJsonToServerEmptyForm");
	                        form = dijit.byId("idEmptyForm");
	                        form.submit();
	                    }, function(error, ioArgs) {
                                scope.errors = "Error: " + error.message;
                                scope.$apply();
                                dojo.setStyle(dijit.byId('buttonSubmit').domNode, 'visibility', 'visible'); // unhide button if save failed
                            }, function(){
                                dojo.setStyle(dijit.byId('buttonSubmit').domNode, 'visibility', 'visible'); // unhide button if save failed
                            });
	                } else {
	                    // managed by workflow
	                    if (cris.workflow && cris.workflow.app && cris.workflow.app.submit) {
	                        // wokflow provide its own submit() function
	                        var complete = cris.workflow.app.submit();
	                        if (complete) {
	                            cris.job.task.app.setJsonToServer("idJsonToServerEmptyForm");
	                            form = dijit.byId("idEmptyForm");
	                            form.submit();
	                        }
	                    } else {
	                        // wokflow doesn't provide a submit() function
	                        if (this.isIgnoreFormData()) {
	                            cris.job.task.app.setJsonToServer("idJsonToServerEmptyForm");
	                            form = dijit.byId("idEmptyForm");
	                            form.submit();
	                        } else {
	                            cris.job.task.app.setJsonToServer("idJsonToServerForm");
	                            form = dijit.byId("idForm");
	                            form.submit();
	                        }
	                    }
	                }
	            },

	            behavior: {
	                "#buttonSave": {
	                    onclick: function (evt) {
	                        cris.job.task.app.save();
	                    }
	                },
	                "#buttonSubmit": {
	                    onclick: function (evt) {
	                        cris.job.task.app.submit();
	                    }
	                }
	            },

	            init: function () {
	                dojo.behavior.add(this.behavior);
	                dojo.behavior.apply();

                    var temp = function(){/*${xmlTemplate}*/}.toString();
                    var start = temp.indexOf("/*") + 2;
                    var end = temp.lastIndexOf("*/");
                    var xmlTemplate = temp.slice(start, end);
	                if (xmlTemplate) {
	                    // managed by cris
                        var temp = function(){/*${data}*/}.toString();
                        var start = temp.indexOf("/*") + 2;
                        var end = temp.lastIndexOf("*/");
                        var jsonData = temp.slice(start, end);
	                    if (!jsonData) {
	                        jsonData = "{}";
	                    }
                        var temp = function(){/*${errors}*/}.toString();
                        var start = temp.indexOf("/*") + 2;
                        var end = temp.lastIndexOf("*/");
                        var jsonMessage = temp.slice(start, end);
	                    if (!jsonMessage) {
	                        jsonMessage = "{}";
	                    }
	                    var term = convertXmlToJson(xmlTemplate);
	                    var data = cris.job.task.app.jsonIn[term.uuid];
	                    var message = dojo.fromJson(jsonMessage);
	                    var scope = getAngularElementScope("idJobTaskController");
	                    scope.currentJobId = this.jobId;
	                    scope.currentTaskId = this.taskId;
	                    scope.currentTemplate = term;
	                    scope.openDocument(term, data, message, cris.job.task.app.jsonIn);
	                } else {
	                    // managed by workflow
	                    //if (cris.workflow && cris.workflow.app && cris.workflow.app.init) {
	                    //    cris.workflow.app.init();
	                    //}
	                }
	            }
	        };

            cris.job.task.app.init();
        });

        cris.bootstrapAngular("idTask", "crisTask");
        // ]]>
    </script>

    <div id="idTask">
        <div id="idJobTaskController" data-ng-controller="JobTaskController">

            <h2><span class='floatLeft'>${task.name}</span></h2>
            <br class="clearBoth"/>
            ${task.description}
            <hr/>

            <form id="idForm" method="POST" action="${urlJobsTask}" enctype="multipart/form-data" data-dojo-type="dijit.form.Form">
                <div id="idGeneratedHtml">
                    ${generatedHtml}
                </div>
                <input type="hidden" name="jobId" value="${job.id}"/>
                <input type="hidden" name="taskId" value="${task.id}"/>
                <input id="idJsonToServerForm" type="hidden" name="jsonToServer"/>
            </form>

            <form id="idEmptyForm" method="POST" action="${urlJobsTask}" enctype="multipart/form-data" data-dojo-type="dijit.form.Form">
                <!-- empty form -->
                <input type="hidden" name="jobId" value="${job.id}"/>
                <input type="hidden" name="taskId" value="${task.id}"/>
                <input id="idJsonToServerEmptyForm" type="hidden" name="jsonToServer"/>
            </form>

            <p class="errors">{{errors}}</p>
            <input id="buttonSubmit" data-dojo-type="dijit.form.Button" data-dojo-props='type: "button", label: "Next"'/>
        </div>
    </div>
</jsp:root>
