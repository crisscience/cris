<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<jsp:root version="2.1" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/rest/objectus/" var="urlRestObjectus"/>
    <spring:url value='/projects/?filter={"op":"equal","data":[{"op":"number","data":"statusId","isCol":true},{"op":"number","data":1,"isCol":false}]}&amp;sort(+name)' var="urlProjects"/>
    <spring:url value="/experiments" var="urlExp"/>
    <spring:url value="/jobs" var="urlJobs"/>
    <spring:url value="/templates/json/names" var="urlTempNames"/>
    <spring:url value="/templates/json/dataset" var="urlDataSet"/>
    <spring:url value="/templates/json/layout" var="urlLayout"/>
    <spring:url value="/templates/xml" var="urlTemplateXml"/>

    <c:set value="${jsRoot}/dm/dataset.js" var="url" />
    <script src="${url}" type="text/javascript"><!-- required for FF3 and Opera --></script>

    <c:set value="${jsRoot}/dm/DatasetControllor.js" var="url" />
    <script type="text/javascript" src="${url}"><!----></script>

    <script type="text/javascript">
    //<![CDATA[
        cris.require("dojox/xml/parser");
        
        cris.objectus = {};
        cris.objectus.index = {};
        cris.objectus.index.app = {
            updateDatasetGrid: function () {
                var scope = getAngularElementScope("idDatasetController");
                scope.gridRef.refreshGrid();
            }
        };

        cris.ready(function () {
            var $scope =  getAngularElementScope("idDatasetController");

            $scope.formatDisplayValue = function (field, rowData, colDef) {
                var orig = rowData[field];
                if (field === MetaField_ProjectId) {
                    var projects = $scope.allProjects ? $scope.allProjects : [];
                    for (var i = 0; i < projects.length; ++i) {
                        if (projects[i]["id"] === orig) {
                            return orig + " - " + projects[i]["name"];
                        }
                    }
                }

                if (field === MetaField_ExperimentId) {
                    var experiments = $scope.allExperiments ? $scope.allExperiments : [];
                        for (var i = 0; i < experiments.length; ++i) {
                            if (experiments[i].id === orig) {
                                return orig + " - " + experiments[i]["name"];
                            }
                        }
                }

                if (field === MetaField_JobId) {
                    var jobs = $scope.allJobs ? $scope.allJobs : [];
                    for (var i = 0; i < jobs.length; ++i) {
                        if (jobs[i].id === orig) {
                            return orig + " - " + jobs[i]["name"];
                        }
                    }
                }

                if (orig === undefined) {
                    // To prevent of displaying "...".
                    return "";
                } else if (orig instanceof Array || orig instanceof Object) {
                    // No filtering and sorting columns with object values
                    var updateGridConfig = false;
                    if (colDef.colDef.enableFiltering || typeof colDef.colDef.enableFiltering === 'undefined') {
                        colDef.colDef.enableFiltering = false;
                        updateGridConfig = true;
                    }
                    if (colDef.colDef.enableSorting || typeof colDef.colDef.enableSorting === 'undefined') {
                        colDef.colDef.enableSorting = false;
                        updateGridConfig = true;
                    }

                    if (updateGridConfig) {
                        $scope.gridRef.notifyGridChange("column");
                    }
                    return "+";
                } else {
                    return orig;
                }
            };

            $scope.rowSelectCallback = function (rowData) {
                $scope.openDocument(rowData);
            };

            $scope.queryStringObj = {};
            $scope.$watch('selectedProject', function(newValue, oldValue){
                if (newValue) {
                    $scope.queryStringObj.projectId = newValue;
                } else {
                    $scope.queryStringObj.projectId = 0;
                }
                if (newValue !== oldValue) {
                    resetGrid();
                }
            });

            $scope.$watch('selectedExperiment', function(newValue, oldValue){
                if (newValue) {
                    $scope.queryStringObj.experimentId = newValue;
                } else {
                    $scope.queryStringObj.experimentId = 0;
                }
                if (newValue !== oldValue) {
                    resetGrid();
                }
            });

            $scope.$watch('selectedJob', function(newValue, oldValue){
                if (newValue) {
                    $scope.queryStringObj.jobId = newValue;
                } else {
                    $scope.queryStringObj.jobId = 0;
                }
                if (newValue !== oldValue) {
                    resetGrid();
                }
            });

            $scope.$watch('selectedTemplate', function(newValue, oldValue){
                if (newValue) {
                    $scope.queryStringObj.templateUuid = newValue;  
                } else {
                    $scope.queryStringObj.templateUuid = 0;
                }
                if (newValue !== oldValue) {
                    refreshGrid();
                }
            });
            
            function resetGrid () {
                $scope.gridColumnDefs.length = 0;
            }

            function refreshGrid () {
                $scope.url = cris.baseUrl + "templates/json/dataset";
                if (Object.keys($scope.queryStringObj).length) {
                    $scope.url = $scope.url + '/?';
                    for (var key in $scope.queryStringObj) {
                        $scope.url = $scope.url + '&' + key + '=' + $scope.queryStringObj[key];
                    }
                }

                if ($scope.currentTemplate && $scope.currentTemplate.version) {
                    $scope.url = $scope.url + '&version=' + $scope.currentTemplate.version;
                    $scope.queryStringObj.verion = $scope.currentTemplate.version;
                } else {
                    delete $scope.queryStringObj.verion;
                }
                
                if ($scope.queryStringObj.templateUuid) {
                    objectusGet("${urlLayout}", $scope.queryStringObj, createColumnDefs, null, null, false);
                } else {
                    resetGrid();
                }
            }

            function createColumnDefs (response, ioArgs) {
                $scope.gridColumnDefs.length = 0 // reset column Defs by clearing array
                $scope.gridRef.notifyGridChange("column"); // notify grid of column changes
                angular.forEach(response[0]["cells"], function (cell) {
                    var colDef = {
                        field: cell['field'],
                        name: prettyPrint(cell['name'], '_'),
                        displayName: prettyPrint(cell['name'], '_'),
                        enableSorting: true,
                        minWidth: 95,
                        cellTemplate: '<div class="ui-grid-cell-contents" title="{{grid.appScope.formatDisplayValue({field:col.field,rowData:row.entity,colDef:col})}}">{{grid.appScope.formatDisplayValue({field:col.field,rowData:row.entity,colDef:col}) CUSTOM_FILTERS}}</div>'
                    };
                    $scope.gridColumnDefs.push(colDef);
                });
                $scope.$apply();
                $scope.gridRef.refreshGrid();
            }
        });

        cris.bootstrapAngular("idDataset", "crisDataset");
    //]]>
    </script>

    <div id="idDataset">
        <div id="idDatasetController" data-ng-controller="DatasetController">

            <h1 class="text-center">Dataset</h1>

            <div class="row">
                <div class="col-sm-8 col-sm-offset-2 col-md-2 col-md-offset-1">
                    <div class="input-group">
                        <label>Project:</label>
                        <cris-url-dropdown url="${urlProjects}" ng-model="selectedProject" id-field="id" name-field="name" item="currentProject" items="allProjects"></cris-url-dropdown>
                    </div>
                    <div class="hidden-md hidden-lg">&amp;nbsp;</div>
                </div>
                <div class="col-sm-8 col-sm-offset-2 col-md-2 col-md-offset-0">
                    <div class="input-group">
                        <label>Experiment:</label>
                        <cris-url-dropdown url="${urlExp}{{experimentQueryStr}}" ng-model="selectedExperiment" id-field="id" name-field="name" item="currentExperiment" items="allExperiments"></cris-url-dropdown>
                    </div>
                    <div class="hidden-md hidden-lg">&amp;nbsp;</div>
                </div>
                <div class="col-sm-8 col-sm-offset-2 col-md-2 col-md-offset-0">
                    <div class="input-group">
                        <label>Job:</label>
                        <cris-url-dropdown url="${urlJobs}{{jobsQueryStr}}" ng-model="selectedJob" id-field="id" name-field="name" item="currentJob" items="allJobs"></cris-url-dropdown>
                    </div>
                    <div class="hidden-md hidden-lg">&amp;nbsp;</div>
                </div>
                <div class="col-sm-8 col-sm-offset-2 col-md-2 col-md-offset-0">
                    <div class="input-group">
                        <label>Template:</label>
                        <cris-url-dropdown url="${urlTempNames}{{templatesQueryStr}}" ng-model="selectedTemplate" id-field="id" name-field="name" item="currentTemplate"></cris-url-dropdown>
                    </div>
                    <div class="hidden-md hidden-lg">&amp;nbsp;</div>
                </div>
                <div class="col-sm-8 col-sm-offset-2 col-md-2 col-md-offset-0">
                    <table style="width:100%;">
                        <tr>
                            <td>
                                <div>&amp;nbsp;</div>
                                <div class="form-horizontal">
                                    <input type="checkbox" ng-model="showAllTemplates" class="checkbox-inline" />
                                    <label style="display:initial;">&amp;nbsp;Show&amp;nbsp;all</label>
                                </div>
                            </td>
                            <td>
                                <div>&amp;nbsp;</div>
                                <input type="button" class="btn btn-primary" value="New" ng-click="newDocument()" />
                            </td>
                        </tr>
                    </table>
                    <div class="hidden-md hidden-lg">&amp;nbsp;</div>
                </div>
            </div>
            
            <div class="hidden-xs hidden-sm">&amp;nbsp;</div>

            <!-- Master view -->
            <div>
                <cris-ui-grid column-defs="gridColumnDefs" url="url" grid-ref="gridRef" enable-filtering="true" row-select-callback="rowSelectCallback(rowData)" format-display-value="formatDisplayValue(field,rowData,colDef)"><!----></cris-ui-grid>
            </div>
            
            <!-- Detailed view -->
            <div data-ng-show="showDetailedView">
                <p/>
                Project: {{currentProject != null ? currentProject : ("N/A")}} | Experiment: {{currentExperiment != null ? currentExperiment : ("N/A")}} | Job: {{currentJob != null ? currentJob : ("N/A")}} | Last Updated: {{timeUpdated != null ? timeUpdated : ("N/A")}}
                <br/>
                Template: {{currentTemplate != null ? currentTemplate.name : ("N/A")}} UUID: {{currentTemplate != null ? currentTemplate.id : ("N/A")}}, Version: {{currentTemplate != null ? currentTemplate.version : ("N/A")}}
                <form id="idDatasetForm" name="DatasetForm" method="post" enctype="multipart/form-data">
                    
                    <div class="form-horizontal">
                        <div class="navbar-btn form-horizontal">
                            <input type="checkbox" class="checkbox-inline" ng-model="overrideHidden" ng-true-value="true" ng-false-value="false" />&amp;nbsp; Override hidden fields
                            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                            <input type="checkbox" class="checkbox-inline" ng-model="overrideReadOnly" ng-true-value="true" ng-false-value="false" />&amp;nbsp; Override read-only fields
                        </div>
                    </div>
                    <hr />
                    
                    <!-- When using dynamic controls ng-form is necessary for angular to handle validation properly -->
                    <ng-form ng-class='{submitted: DatasetForm.submitted==true}'>
                        <cris-dataset term="term" dataset="data" context="context" message="message" readOnly="false" override-read-only="overrideReadOnly" override-hidden="overrideHidden"><!----></cris-dataset>
                    </ng-form>
                </form>

                <!-- Save and delete buttons -->
                <div>
                    <p class="text-danger">{{errors}}</p>
                    <div class="pull-left">
                        <input type="button" class="btn btn-primary" value="Save" ng-click="saveDocument()" />
                    </div>
                    <div class="pull-right" data-ng-hide="isNew === null || isNew">
                        <input type="button" class="btn btn-danger" value="Delete" ng-click="deleteDocument()" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</jsp:root>
