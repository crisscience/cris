<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.1" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:spring="http://www.springframework.org/tags">

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/users" var="url"/>

    <script type="text/javascript">
    // <![CDATA[
        angular.module('crisUser', ["angular-dojo"]).controller('userController', ['$scope', '$http', '$uibModal', function ($scope, $http, $uibModal) {
            $scope.enabled = "true"; // by default show enabled users
            $scope.url = "${url}" + '/?' + 'enabled=true&sort(+lastName)';
            
            $scope.gridColumnDefs = [
                {field: 'id', name: 'id', displayName: 'ID', width: 60, visible: false},
                {field: 'lastName', name: 'lastName', displayName: 'Last Name', minWidth: 120},
                {field: 'firstName', name: 'firstName', displayName: 'First Name', minWidth: 120},
                {field: 'username', name: 'username', displayName: 'User Name', minWidth: 160}
            ];
            
            clearDetails();
            $scope.$watch('enabled', function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    if (newValue === '') { // all users
                        $scope.url = "${url}" + '/?sort(+lastName)';
                    } else if (newValue === 'true') { // enabled users
                        $scope.url = "${url}" + '/?enabled=true&sort(+lastName)';
                    } else { // disabled users
                        $scope.url = "${url}" + '/?enabled=false&sort(+lastName)';
                    }
                    clearDetails();
                    refreshGrid();
                }
            });
            
            $scope.save = function () {
                var data;
                var method;
                if ($scope.isNewUser) {
                    if (!$scope.record.username) {
                        showMessageModal({uibModal: $uibModal, message: "You must specify a username"});
                        return;
                    }
                    data = $scope.record;
                    method = "POST";
                } else {
                    if ($scope.selectedRecord) {
                        if (!isModified()) {
                            showMessageModal({uibModal: $uibModal, message: "No change is made"});
                            return;
                        }
                        data = $scope.selectedRecord;
                        data.username = $scope.record.username;
                        data.enabled = ($scope.record.enabled === true);
                        method = "PUT";
                    } else {
                        showMessageModal({uibModal: $uibModal, message: "Please select a user"});
                        return;
                    }
                }
                $scope.isNewUser = false;
                
                var progressModal = showProgressModal({uibModal: $uibModal});
                $http({
                    url: "${url}" + (method === "PUT" ? "/" + data.id : ""),
                    method: method,
                    data: data
                }).then(function successCallback(data) {
                    var response = data.data;
                    if (response.hasError) {
                        showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + response.message + " " + response.status});
                        progressModal.close();
                        return;
                    }
                    refreshGrid(true);
                    progressModal.close();
                }, function errorCallback(error) {
                    var message;
                    if (error.data && error.data.text) {
                        message = dojo.fromJson(error.data.text).message;
                    } else {
                        message = error.data;
                    }
                    progressModal.close();
                    showMessageModal({uibModal: $uibModal, message: "Failed to save changes. " + message})
                });
            };
            
            $scope.rowSelectCallback = function (rowData) {
                $scope.isNewUser = false;
                $scope.record = angular.copy(rowData);
                $scope.selectedRecord = rowData;
                $scope.toggleDetailsView(true);
                $scope.currentAction = "Edit selected user";
            };
            
            $scope.createNewUser = function () {
                clearSelected();
                clearDetails();
                $scope.toggleDetailsView(true);
                $scope.isNewUser = true;
                $scope.currentAction = "Create a new user";
            };
            
            $scope.reset = function () {
                if ($scope.selectedRecord) {
                    $scope.record = angular.copy($scope.selectedRecord);
                } else {
                    $scope.record = {};
                }
            };
            
            $scope.getTimeCreated = function (record) {
                return record && record.timeCreated && record.timeCreated.$date ? dateIsoToLocale(record.timeCreated.$date) : "";
            };
            
            $scope.getLastUpdated = function (record) {
                return record && record.timeUpdated && record.timeUpdated.$date ? dateIsoToLocale(record.timeUpdated.$date) : "";
            };
            
            $scope.isAdminUser = function () {
                var result = false;
                if ($scope.selectedRecord) { // only enable some buttons for administrators
                    result = ($scope.selectedRecord.username === 'administrator');
                }
                return result;
            };
            
            // On smaller screens toggle between projects view and details view
            $scope.toggleDetailsView = function (doShow, clearSelection) {
                if (doShow) {
                    $('#detailsView').removeClass('hidden-xs hidden-sm');
                    $('#usersView').addClass('hidden-xs hidden-sm');
                } else {
                    $('#detailsView').addClass('hidden-xs hidden-sm');
                    $('#usersView').removeClass('hidden-xs hidden-sm');
                    if (clearSelection) {
                        clearSelected();
                    }
                }
            };
            
            function refreshGrid (restoreSelection) {
                if ($scope.gridRef) {
                    if (restoreSelection && $scope.selectedRecord) {
                        $scope.gridRef.refreshGrid(function () {
                            $scope.gridRef.selectRow($scope.selectedRecord.id, "id");
                        });
                    } else {
                        $scope.gridRef.refreshGrid();
                    }
                }
            }
            
            function isModified () {
                var modified = false;
                if ($scope.record.enabled !== $scope.selectedRecord.enabled) {
                    modified = true;
                }
                if ($scope.record.username !== $scope.selectedRecord.username) {
                    modified = true;
                }
                return modified;
            }  
            
            function clearSelected () {
                if ($scope.gridRef) {
                    $scope.gridRef.clearSelection();
                }
                $scope.selectedRecord = null;
                $scope.isNewUser = false;
                $scope.currentAction = "No user selected";
            }
            
            function clearDetails () {
                clearSelected();
                $scope.record = {};
            }
            
        }]);
        cris.bootstrapAngular("idUser", "crisUser");
        // ]]>
    </script>
    
    <div id="idUser" data-ng-controller="userController">
        <div class="row">
            <div id="usersView" class="col-xs-12 col-sm-10 col-md-6 col-sm-offset-1">
                <h2>Users</h2>
                <div class="row">
                    <div class="col-md-5">
                        <button type="button" class="btn btn-primary" ng-click="createNewUser()">New</button>
                    </div>
                    <div class="col-md-7 text-right">
                        <br class="hidden-xs hidden-sm"/>
                        Show:&amp;nbsp;
                        <span style="display: inline-block;"><cris-radio-button-group name="usersStatus" orientation="horizontal" items="{'Show Enabled': 'true', 'Show Disabled': 'false', 'Show All': ''}" data-ng-model="enabled"><!-- --></cris-radio-button-group></span>
                    </div>
                </div>
                <br />
                <cris-ui-grid column-defs="gridColumnDefs" url="url" grid-ref="gridRef" enable-filtering="true" row-select-callback="rowSelectCallback(rowData)" format-display-value="formatDisplayValue(value,rowData,isDate)"><!----></cris-ui-grid>
            </div>
            <div id="detailsView" class="col-xs-12 col-sm-10 col-md-4 hidden-xs hidden-sm">
                <div class="hidden-md hidden-lg">
                    <button type="button" class="btn btn-default" ng-click="toggleDetailsView(null, true)"><span class="glyphicon glyphicon-chevron-left"></span>&amp;nbsp;Back to Users List</button>
                </div>
                <h2>Details</h2>
                <div class="text-center">{{currentAction}}</div>
                <div ng-show="selectedRecord || isNewUser">
                    <table class="table table-striped">
                        <tr>
                            <td style="width: 30%">ID:</td>
                            <td style="width: 70%">{{record.id}}</td>
                        </tr>
                        <tr>
                            <td>External Source:</td>
                            <td>{{record.externalSource}}</td>
                        </tr>
                        <tr>
                            <td>External ID:</td>
                            <td>{{record.externalId}}</td>
                        </tr>
                        <tr>
                            <td>Username:</td>
                            <td><input type="text" ng-model="record.username" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>First Name:</td>
                            <td>{{record.firstName}}</td>
                        </tr>
                        <tr>
                            <td>Middle Name:</td>
                            <td>{{record.middleName}}</td>
                        </tr>
                        <tr>
                            <td>Last Name:</td>
                            <td>{{record.lastName}}</td>
                        </tr>
                        <tr>
                            <td>Email:</td>
                            <td>{{record.email}}</td>
                        </tr>
                        <tr>
                            <td>Time Created:</td>
                            <td>{{getTimeCreated(record)}}</td>
                        </tr>
                        <tr>
                            <td>Last Updated:</td>
                            <td>{{getLastUpdated(record)}}</td>
                        </tr>
                        <tr>
                            <td>Enabled?</td>
                            <td class="text-center"><input type="checkbox" ng-model="record.enabled" ng-true-value="true" ng-false-value="false" class="checkbox-inline" ng-disabled="isAdminUser()" /></td>
                        </tr>
                    </table>
                    <div class="pull-right">
                        <button type="button" class="btn btn-primary" ng-click="save()" ng-disabled="isAdminUser()">Save</button>
                        &amp;nbsp;
                        <button type="button" class="btn btn-primary" ng-click="reset()" ng-disabled="isAdminUser()">Reset</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</jsp:root>
