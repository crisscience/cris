<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.1"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:spring="http://www.springframework.org/tags"
          >

    <jsp:output omit-xml-declaration="yes"/>

    <spring:url value="/workflows" var="url"/>
    <spring:url value="/workflows/import" var="urlImport"/>
    <spring:url value="/workflows/export" var="urlExport"/>
    <spring:url value="/workflows/versions" var="urlVersions"/>

    <script type="text/javascript">
        // <![CDATA[
        cris.require("dijit/form/Form");
        cris.require("dijit/form/Button");
        cris.require("dijit/form/TextBox");
        cris.require("dijit/form/SimpleTextarea");
        cris.require("dijit/form/FilteringSelect");
        cris.require("dijit/layout/TabContainer");
        cris.require("dijit/layout/ContentPane");
        cris.require("dojox/form/Uploader");
        cris.require("dojo/behavior");
        cris.require("dojo/io/iframe");
        cris.require("dojo/store/Memory");

        cris.workflow = {};

        cris.workflow.app = {
            store: null,

            grid: null,

            workflowId: null,
            workflows: null,

            updateHtml: function(item) {
                dojo.byId("detailVersionNumber").innerHTML = item["versionNumber"];
                dojo.byId("detailKey").innerHTML = item["key"] ? item["key"] : "";
                dojo.byId("detailName").innerHTML = item["name"] ? item["name"] : "";
                dojo.byId("detailFileName").innerHTML = item["resourceName"] ? item["resourceName"] : "";
                dojo.byId("detailTimeCreated").innerHTML = stringDateTime(item["deploymentTime"]);
                dojo.byId("detailExportUrl").href = (item ? "${urlExport}/" + this.workflowId : "") + "?version=" + item.version;
                dojo.byId("detailExportUrl").innerHTML = (item && item.deploymentName) ? item.deploymentName : "";
            },

            isModified: function() {
                var modified = false;

                var files = dijit.byId("idFile").getFileList();
                if (files.length === 1) {
                    modified = true;
                }

                return modified;
            },

            uploadWorkflow: function() {
                var pd = createProgressDialog();

                // send item + file to the backend using PUT/POST
                dojo.io.iframe.send({
                    url: "${urlImport}",
                    method: "POST",
                    form: "form",
                    handleAs: "json",
                    load: function(data, ioArgs) {
                        cris.workflow.app.grid.setQuery({});
                        if (data.error) {
                            pd.setContent("Error: " + data.error);
                        } else {
                            pd.hide();
                        }
                    },
                    error: function(error) {
                        pd.setContent("Failed to save changes. " + error);
                    }
                });
            },

            behavior: {
                "#idGrid": {
                    onclick: function(evt) {
                        dojo.publish("cris/workflow/newSelection", []);
                    }
                },
                "#buttonUpload": {
                    onclick: function(evt) {
                        if (cris.workflow.app.isModified()) {
                            var yes = showConfirm("Do you want to upload the workflow archive file?");
                            if (!yes) {
                                return;
                            }
                        } else {
                            showMessage("Please select a workflow archive file.");
                            return;
                        }

                        cris.workflow.app.uploadWorkflow();
                    }
                },
                "#buttonReset": {
                    onclick: function(evt) {
                        dijit.byId("idFile").reset();
                        dijit.byId("idFileName").setValue("");
                    }
                }
            },

            init: function() {
                this.store = createJsonRestStore("${url}");

                var layout = [{cells: [
                            {field: 'id', name: 'ID', datatype: "number", width: '50px'},
                            {field: 'name', name: 'Name', width: 'auto'},
                            {field: 'timeUpdated', name: 'Last Updated', datatype: "date", width: '100px', get: function(row, item) {
                                    if (!item) {
                                        return "Loading...";
                                    }
                                    return stringDate(item.timeUpdated);
                                }}
                        ]}];

                var asc = true;
                var args = {
                    sortFields: [{attribute: "name", descending: !asc}],
                    rowsPerPage: 10,
                    pageSizes: []
                };
                this.grid = createGrid(this.store, layout, "idGrid", args);
                this.grid.setSortIndex(1, asc);
                if ("${filter}" !== "") {
                    this.grid.setQuery({filter: "${filter}"});
                }

                this.updateHtml({});

                dojo.behavior.add(this.behavior);
                dojo.behavior.apply();

                dojo.connect(dijit.byId("idFile"), "onChange", function(evt) {
                    var files = dijit.byId("idFile").getFileList();
                    if (files[0]) {
                        dijit.byId("idFileName").setValue(files[0].name);
                    }
                });

                var _this = this;
                dojo.connect(dijit.byId("detailVersionNumber"), "onChange", function(evt) {
                    var index = dijit.byId("detailVersionNumber").getValue();
                    var workflow = _this.workflows[index];
                    _this.updateHtml(workflow);
                });

                dojo.subscribe("cris/workflow/newSelection", this, function(evt) {
                    if (this.grid.selection.getSelectedCount("row") >= 1) {
                        var item = this.grid.selection.getSelected("row")[0];

                        _this.workflowId = item.id;

                        // fetch all versions of the workflow
                        var xhrArgs = {
                            url: "${urlVersions}/" + item.id,
                            handleAs: "json",

                            load: function(data){
                                _this.workflows = data;

                                // display: version number, value: index to array
                                var versionIndex = [];
                                for (var i = 0; i < data.length; i++) {
                                    versionIndex.push({name: "" + data[i].version, id: "" + i});
                                }
                                var storeVersionIndex = new dojo.store.Memory({data: versionIndex});
                                var widgetVersionNumber = dijit.byId("detailVersionNumber");
                                widgetVersionNumber.store = storeVersionIndex;
                                if (data.length > 0) {
                                    widgetVersionNumber.set("value", "" + 0);
                                    widgetVersionNumber.onChange();
                                }
                            },

                            error: function(error){
                                console.log(error);
                            }
                        };

                        // Call the asynchronous xhrGet
                        dojo.xhrGet(xhrArgs);
                    }
                });
            }
        };

        cris.ready(function() {
            cris.workflow.app.init();
        });
        // ]]>
    </script>

    <div style="width: 100%; height: 600px">
        <div data-dojo-type="dijit.layout.TabContainer" style="width: 100%; height: 100%;">
            <div data-dojo-type="dijit.layout.ContentPane" title="Import">
                <h2>Import Workflows</h2>
                <form id="form" method="POST" enctype="multipart/form-data" data-dojo-type="dijit.form.Form">
                    Workflow Archive File:
                    <input id="idFileName" type="text" name="workflowArchiveFile" data-dojo-type="dijit.form.TextBox" placeholder="workflow archive file" readonly=''/>
                    <input id="idFile" name="file" data-dojo-type="dojox.form.Uploader" data-dojo-props='multiple : false, label : "Browse..."' style="width: 75px;"/>
                    <input id="buttonUpload" type="button" data-dojo-type="dijit.form.Button" data-dojo-props='label : "Upload"'/>&amp;nbsp
                    <input id="buttonReset" type="button" data-dojo-type="dijit.form.Button" data-dojo-props='label : "Reset"'/>&amp;nbsp
                    <br/>
                </form>

                <div>
                    <div class="half floatLeft">
                        <h2>Workflows</h2>
                        <div id="idGrid"><!-- --></div>
                    </div>

                    <div class="half floatRight">
                        <h2>Details</h2>

                        <form id="formDetail" method="POST" data-dojo-type="dijit.form.Form">
                            <table style="width: 100%">
                                <tr>
                                    <td style="width: 40%">Version:</td>
                                    <td><input id="detailVersionNumber" data-dojo-type="dijit.form.FilteringSelect" data-dojo-props=""/></td>
                                </tr>
                                <tr>
                                    <td>Key:</td>
                                    <td><span id="detailKey"><!-- --></span></td>
                                </tr>
                                <tr>
                                    <td>Name:</td>
                                    <td><span id="detailName"><!-- --></span></td>
                                </tr>
                                <tr>
                                    <td>Workflow File Name:</td>
                                    <td><span id="detailFileName"><!-- --></span></td>
                                </tr>
                                <tr>
                                    <td>Time Created:</td><td id="detailTimeCreated"><!-- --></td>
                                </tr>
                                <tr>
                                    <td>Export Link:</td>
                                    <td>
                                        <a id="detailExportUrl" href="uninitialized"></a>
                                    </td>
                                </tr>
                            </table>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

</jsp:root>
