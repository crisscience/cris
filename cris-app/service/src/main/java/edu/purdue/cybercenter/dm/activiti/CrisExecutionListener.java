/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.purdue.cybercenter.dm.activiti;

import edu.purdue.cybercenter.dm.domain.Job;
import edu.purdue.cybercenter.dm.domain.MetaField;
import edu.purdue.cybercenter.dm.service.DatasetService;
import edu.purdue.cybercenter.dm.util.AppConfigConst;
import edu.purdue.cybercenter.dm.util.ConstDatasetState;
import edu.purdue.cybercenter.dm.util.EnumDatasetState;
import edu.purdue.cybercenter.dm.util.EnumJobStatus;
import edu.purdue.cybercenter.dm.util.Helper;
import edu.purdue.cybercenter.dm.service.WorkflowService;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.activiti.engine.delegate.DelegateExecution;
import org.activiti.engine.delegate.ExecutionListener;
import org.activiti.engine.delegate.Expression;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;

/**
 *
 * @author xu222
 */
@Configurable
public class CrisExecutionListener implements ExecutionListener {
    private static final long serialVersionUID = 1L;

    @Autowired
    private DatasetService datasetService;

    private Expression initialDatasetState;
    private Expression finalDatasetStates;

    @Override
    public void notify(DelegateExecution de) throws Exception {
        String sJobId = de.getProcessBusinessKey();
        Integer jobId = Integer.parseInt(sJobId);
        Job job = Job.findJob(jobId);
        if (job != null) {
            if (de.getEventName().equals(ExecutionListener.EVENTNAME_START)) {
                job.setStatusId(EnumJobStatus.STARTED.getIndex());
                job.merge();

                /*
                 * Create a working directory for the job
                 */
                String workingDir = AppConfigConst.getJobTmpPath() + AppConfigConst.FILE_SEPARATOR + sJobId;
                File file = new File(workingDir);
                if (file.exists()) {
                    FileUtils.deleteDirectory(file);
                }
                if (!file.mkdirs()) {
                    throw new Exception("Unable to create working directory for job " + sJobId + ": " + workingDir);
                }

                // set initial state
                setInitialState(de);
            } else if (de.getEventName().equals(ExecutionListener.EVENTNAME_END)) {
                Set<String> templateUuids = (Set<String>) de.getVariable(WorkflowService.JobTemplateUuids);

                /*
                 * 1. save IDs of all templates used
                 * 2. set job status to finished
                 */
                ExecutionEntity ee = (ExecutionEntity) de;
                job.setTemplateUuids(templateUuids);
                if (ee.isEnded()) {
                    job.setStatusId(EnumJobStatus.FINISHED.getIndex());
                } else {
                    job.setStatusId(EnumJobStatus.CANCELED.getIndex());
                }
                job.merge();

                /*
                 * Remove working directory for the job
                 */
                String workingDir = AppConfigConst.getJobTmpPath() + AppConfigConst.FILE_SEPARATOR + sJobId;
                File file = new File(workingDir);
                FileUtils.deleteDirectory(file);

                /*
                 * set the state of all dataset generated by this job.
                 * Change Temporary state to Depricated and everything else to finalDatasetState
                 */
                Integer temporaryState = EnumDatasetState.Temporary.getIndex();
                Integer deprecatedState = EnumDatasetState.Deprecated.getIndex();

                if (ee.isEnded()) {
                    Integer iFinalState = (Integer) de.getVariable(ConstDatasetState.FinalDatasetState);
                    if (iFinalState != null) {
                        Map<String, Object> queryNotEqual = new HashMap<>();
                        queryNotEqual.put("$ne", temporaryState);

                        Map<String, Object> queryOthers = new HashMap<>();
                        queryOthers.put(MetaField.JobId, jobId);
                        queryOthers.put(MetaField.State, queryNotEqual);
                        datasetService.updateState(iFinalState, queryOthers, templateUuids);
                    }

                    Map<String, Object> queryTemporary = new HashMap<>();
                    queryTemporary.put(MetaField.JobId, jobId);
                    queryTemporary.put(MetaField.State, temporaryState);
                    datasetService.updateState(deprecatedState, queryTemporary, templateUuids);
                } else {
                    Map<String, Object> queryAllJobData = new HashMap<>();
                    queryAllJobData.put(MetaField.JobId, jobId);
                    datasetService.updateState(deprecatedState, queryAllJobData, templateUuids);
                }
            } else if (de.getEventName().equals(ExecutionListener.EVENTNAME_TAKE)) {

            } else {
                throw new RuntimeException("Unknown execution event: " + de.getEventName());
            }
        } else {
            throw new RuntimeException("Unknown job with job ID: " + sJobId);
        }
    }

    private void setInitialState(DelegateExecution de) {
        String sInitialState = initialDatasetState != null ? initialDatasetState.getExpressionText() : null;
        String sFinalStates = finalDatasetStates != null ? finalDatasetStates.getExpressionText() : null;

        Integer iInitialState;
        List<Integer> iFinalStates;
        Integer iFinalState;

        if (sInitialState == null && sFinalStates == null) {
            iInitialState = EnumDatasetState.Sandboxed.getIndex();
            iFinalState = EnumDatasetState.Operational.getIndex();
            iFinalStates = null;
        } else if (sInitialState != null && sFinalStates == null) {
            iInitialState = Integer.parseInt(sInitialState);
            iFinalState = iInitialState;
            iFinalStates = null;
        } else {
            iFinalStates = Helper.deserialize(sFinalStates, List.class);
            if (sInitialState == null) {
                iInitialState = EnumDatasetState.Sandboxed.getIndex();
                if (iFinalStates == null || iFinalStates.isEmpty()) {
                    iFinalState = EnumDatasetState.Operational.getIndex();
                } else if (iFinalStates.size() == 1) {
                    iFinalState = iFinalStates.get(0);
                } else {
                    iFinalState = null;
                }
            } else {
                iInitialState = Integer.parseInt(sInitialState);
                if (iFinalStates == null || iFinalStates.isEmpty()) {
                    iFinalState = iInitialState;
                } else if (iFinalStates.size() == 1) {
                    iFinalState = iFinalStates.get(0);
                } else {
                    iFinalState = null;
                }
            }
        }

        de.setVariable(ConstDatasetState.InitialDatasetState, iInitialState);
        de.setVariable(ConstDatasetState.FinalDatasetState, iFinalState);
        de.setVariable(ConstDatasetState.FinalDatasetStates, iFinalStates);
    }
}
